
Digital Compass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003454  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f0  080035f0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080035f0  080035f0  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035f0  080035f0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f0  080035f0  000135f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080035f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  200000a4  0800369c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  0800369c  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aaa5  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001899  00000000  00000000  0002ab72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002c410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002cd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168bb  00000000  00000000  0002d660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c141  00000000  00000000  00043f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082e25  00000000  00000000  0005005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2e81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a64  00000000  00000000  000d2ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003548 	.word	0x08003548

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08003548 	.word	0x08003548

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <I2C_Write>:

#include "HMC5883_HwInterface.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t I2C_Write(uint8_t SlA, uint8_t *Data, uint8_t Len) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	6039      	str	r1, [r7, #0]
 8000166:	71fb      	strb	r3, [r7, #7]
 8000168:	4613      	mov	r3, r2
 800016a:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef HAL_ERROR = HAL_I2C_Master_Transmit(&hi2c1, SlA << 1,
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	b29b      	uxth	r3, r3
 8000170:	005b      	lsls	r3, r3, #1
 8000172:	b299      	uxth	r1, r3
 8000174:	79bb      	ldrb	r3, [r7, #6]
 8000176:	b29b      	uxth	r3, r3
 8000178:	2264      	movs	r2, #100	; 0x64
 800017a:	9200      	str	r2, [sp, #0]
 800017c:	683a      	ldr	r2, [r7, #0]
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <I2C_Write+0x40>)
 8000180:	f000 ff7a 	bl	8001078 <HAL_I2C_Master_Transmit>
 8000184:	4603      	mov	r3, r0
 8000186:	73fb      	strb	r3, [r7, #15]
			Data, Len, 100);

	return (HAL_ERROR == HAL_OK ? 0 : 1);
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	2b00      	cmp	r3, #0
 800018c:	bf14      	ite	ne
 800018e:	2301      	movne	r3, #1
 8000190:	2300      	moveq	r3, #0
 8000192:	b2db      	uxtb	r3, r3
}
 8000194:	4618      	mov	r0, r3
 8000196:	3710      	adds	r7, #16
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	200000c0 	.word	0x200000c0

080001a0 <I2C_Read>:

uint8_t I2C_Read(uint8_t SlA, uint8_t *Data, uint8_t Len) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af02      	add	r7, sp, #8
 80001a6:	4603      	mov	r3, r0
 80001a8:	6039      	str	r1, [r7, #0]
 80001aa:	71fb      	strb	r3, [r7, #7]
 80001ac:	4613      	mov	r3, r2
 80001ae:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef HAL_ERROR = HAL_I2C_Master_Receive(&hi2c1, SlA << 1, Data,
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	b29b      	uxth	r3, r3
 80001b4:	005b      	lsls	r3, r3, #1
 80001b6:	b299      	uxth	r1, r3
 80001b8:	79bb      	ldrb	r3, [r7, #6]
 80001ba:	b29b      	uxth	r3, r3
 80001bc:	2264      	movs	r2, #100	; 0x64
 80001be:	9200      	str	r2, [sp, #0]
 80001c0:	683a      	ldr	r2, [r7, #0]
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <I2C_Read+0x40>)
 80001c4:	f001 f856 	bl	8001274 <HAL_I2C_Master_Receive>
 80001c8:	4603      	mov	r3, r0
 80001ca:	73fb      	strb	r3, [r7, #15]
			Len, 100);

	return (HAL_ERROR == HAL_OK ? 0 : 1);
 80001cc:	7bfb      	ldrb	r3, [r7, #15]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	bf14      	ite	ne
 80001d2:	2301      	movne	r3, #1
 80001d4:	2300      	moveq	r3, #0
 80001d6:	b2db      	uxtb	r3, r3
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3710      	adds	r7, #16
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	200000c0 	.word	0x200000c0

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b590      	push	{r4, r7, lr}
 80001e6:	b0b7      	sub	sp, #220	; 0xdc
 80001e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fb13 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 f845 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 f8e1 	bl	80003b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001f6:	f000 f887 	bl	8000308 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80001fa:	f000 f8b3 	bl	8000364 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HMC5883_Stat_t L;
  uint16_t Buffer[100];
  uint8_t len;
  HMC5883_Init(&Compass);
 80001fe:	481a      	ldr	r0, [pc, #104]	; (8000268 <main+0x84>)
 8000200:	f000 fa53 	bl	80006aa <HMC5883_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  L = HMC5883_Get_Readings(&Compass);
 8000204:	4818      	ldr	r0, [pc, #96]	; (8000268 <main+0x84>)
 8000206:	f000 fa87 	bl	8000718 <HMC5883_Get_Readings>
 800020a:	4603      	mov	r3, r0
 800020c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	  len= sprintf(Buffer,"Compass: %s, X: %d , Y: %d , Z: %d\n\r ",
 8000210:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000214:	2b00      	cmp	r3, #0
 8000216:	d101      	bne.n	800021c <main+0x38>
 8000218:	4a14      	ldr	r2, [pc, #80]	; (800026c <main+0x88>)
 800021a:	e000      	b.n	800021e <main+0x3a>
 800021c:	4a14      	ldr	r2, [pc, #80]	; (8000270 <main+0x8c>)
	  	                        L == HMC5883_OK ? "OK" : "NOK",
	  	                        Compass.X_Output_Data,
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <main+0x84>)
 8000220:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	  len= sprintf(Buffer,"Compass: %s, X: %d , Y: %d , Z: %d\n\r ",
 8000224:	461c      	mov	r4, r3
	  	                        Compass.Y_Output_Data,
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <main+0x84>)
 8000228:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	  len= sprintf(Buffer,"Compass: %s, X: %d , Y: %d , Z: %d\n\r ",
 800022c:	4619      	mov	r1, r3
	  	                        Compass.Z_Output_Data);
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <main+0x84>)
 8000230:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
	  len= sprintf(Buffer,"Compass: %s, X: %d , Y: %d , Z: %d\n\r ",
 8000234:	1d38      	adds	r0, r7, #4
 8000236:	9301      	str	r3, [sp, #4]
 8000238:	9100      	str	r1, [sp, #0]
 800023a:	4623      	mov	r3, r4
 800023c:	490d      	ldr	r1, [pc, #52]	; (8000274 <main+0x90>)
 800023e:	f002 fd09 	bl	8002c54 <siprintf>
 8000242:	4603      	mov	r3, r0
 8000244:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce

	  HAL_UART_Transmit(&huart1, Buffer, strlen(Buffer), 100);
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	4618      	mov	r0, r3
 800024c:	f7ff ff7e 	bl	800014c <strlen>
 8000250:	4603      	mov	r3, r0
 8000252:	b29a      	uxth	r2, r3
 8000254:	1d39      	adds	r1, r7, #4
 8000256:	2364      	movs	r3, #100	; 0x64
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <main+0x94>)
 800025a:	f002 fa6b 	bl	8002734 <HAL_UART_Transmit>
	  	  HAL_Delay(200);
 800025e:	20c8      	movs	r0, #200	; 0xc8
 8000260:	f000 fb3a 	bl	80008d8 <HAL_Delay>
  {
 8000264:	e7ce      	b.n	8000204 <main+0x20>
 8000266:	bf00      	nop
 8000268:	20000000 	.word	0x20000000
 800026c:	08003560 	.word	0x08003560
 8000270:	08003564 	.word	0x08003564
 8000274:	08003568 	.word	0x08003568
 8000278:	20000114 	.word	0x20000114

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fcda 	bl	8002c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029e:	2301      	movs	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b0:	2302      	movs	r3, #2
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 0318 	add.w	r3, r7, #24
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 fdc7 	bl	8001e58 <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d0:	f000 f8a0 	bl	8000414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	2302      	movs	r3, #2
 80002da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 f834 	bl	800235c <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fa:	f000 f88b 	bl	8000414 <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3740      	adds	r7, #64	; 0x40
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_I2C1_Init+0x50>)
 800030e:	4a13      	ldr	r2, [pc, #76]	; (800035c <MX_I2C1_Init+0x54>)
 8000310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_I2C1_Init+0x50>)
 8000314:	4a12      	ldr	r2, [pc, #72]	; (8000360 <MX_I2C1_Init+0x58>)
 8000316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_I2C1_Init+0x50>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_I2C1_Init+0x50>)
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_I2C1_Init+0x50>)
 8000326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800032a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <MX_I2C1_Init+0x50>)
 800032e:	2200      	movs	r2, #0
 8000330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_I2C1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <MX_I2C1_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_I2C1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_I2C1_Init+0x50>)
 8000346:	f000 fd53 	bl	8000df0 <HAL_I2C_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000350:	f000 f860 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200000c0 	.word	0x200000c0
 800035c:	40005400 	.word	0x40005400
 8000360:	000186a0 	.word	0x000186a0

08000364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800036a:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <MX_USART1_UART_Init+0x50>)
 800036c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039a:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800039c:	f002 f96c 	bl	8002678 <HAL_UART_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003a6:	f000 f835 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000114 	.word	0x20000114
 80003b4:	40013800 	.word	0x40013800

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_GPIO_Init+0x58>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a13      	ldr	r2, [pc, #76]	; (8000410 <MX_GPIO_Init+0x58>)
 80003c4:	f043 0320 	orr.w	r3, r3, #32
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_GPIO_Init+0x58>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0320 	and.w	r3, r3, #32
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_GPIO_Init+0x58>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <MX_GPIO_Init+0x58>)
 80003dc:	f043 0304 	orr.w	r3, r3, #4
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_GPIO_Init+0x58>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0304 	and.w	r3, r3, #4
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_GPIO_Init+0x58>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a07      	ldr	r2, [pc, #28]	; (8000410 <MX_GPIO_Init+0x58>)
 80003f4:	f043 0308 	orr.w	r3, r3, #8
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <MX_GPIO_Init+0x58>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0308 	and.w	r3, r3, #8
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000418:	b672      	cpsid	i
}
 800041a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041c:	e7fe      	b.n	800041c <Error_Handler+0x8>
	...

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <HAL_MspInit+0x5c>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a14      	ldr	r2, [pc, #80]	; (800047c <HAL_MspInit+0x5c>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b12      	ldr	r3, [pc, #72]	; (800047c <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <HAL_MspInit+0x5c>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a0e      	ldr	r2, [pc, #56]	; (800047c <HAL_MspInit+0x5c>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <HAL_MspInit+0x60>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_MspInit+0x60>)
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000472:	bf00      	nop
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	40021000 	.word	0x40021000
 8000480:	40010000 	.word	0x40010000

08000484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <HAL_I2C_MspInit+0x70>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d123      	bne.n	80004ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a13      	ldr	r2, [pc, #76]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0308 	and.w	r3, r3, #8
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004bc:	23c0      	movs	r3, #192	; 0xc0
 80004be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004c0:	2312      	movs	r3, #18
 80004c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c4:	2303      	movs	r3, #3
 80004c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	480b      	ldr	r0, [pc, #44]	; (80004fc <HAL_I2C_MspInit+0x78>)
 80004d0:	f000 fb0a 	bl	8000ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004de:	61d3      	str	r3, [r2, #28]
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_I2C_MspInit+0x74>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40005400 	.word	0x40005400
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010c00 	.word	0x40010c00

08000500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a1c      	ldr	r2, [pc, #112]	; (800058c <HAL_UART_MspInit+0x8c>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d131      	bne.n	8000584 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <HAL_UART_MspInit+0x90>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a1a      	ldr	r2, [pc, #104]	; (8000590 <HAL_UART_MspInit+0x90>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <HAL_UART_MspInit+0x90>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <HAL_UART_MspInit+0x90>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <HAL_UART_MspInit+0x90>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_UART_MspInit+0x90>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000554:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	2302      	movs	r3, #2
 8000558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055a:	2303      	movs	r3, #3
 800055c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <HAL_UART_MspInit+0x94>)
 8000566:	f000 fabf 	bl	8000ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800056a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <HAL_UART_MspInit+0x94>)
 8000580:	f000 fab2 	bl	8000ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40013800 	.word	0x40013800
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800059c:	e7fe      	b.n	800059c <NMI_Handler+0x4>

0800059e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <HardFault_Handler+0x4>

080005a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <MemManage_Handler+0x4>

080005aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005de:	f000 f95f 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <_sbrk+0x5c>)
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <_sbrk+0x60>)
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <_sbrk+0x64>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <_sbrk+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	429a      	cmp	r2, r3
 8000616:	d207      	bcs.n	8000628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000618:	f002 faea 	bl	8002bf0 <__errno>
 800061c:	4603      	mov	r3, r0
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	e009      	b.n	800063c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <_sbrk+0x64>)
 8000638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20005000 	.word	0x20005000
 8000648:	00000400 	.word	0x00000400
 800064c:	2000018c 	.word	0x2000018c
 8000650:	200001a8 	.word	0x200001a8

08000654 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000660:	f7ff fff8 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000666:	490c      	ldr	r1, [pc, #48]	; (8000698 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <LoopFillZerobss+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800067c:	4c09      	ldr	r4, [pc, #36]	; (80006a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f002 fab7 	bl	8002bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fda9 	bl	80001e4 <main>
  bx lr
 8000692:	4770      	bx	lr
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800069c:	080035f8 	.word	0x080035f8
  ldr r2, =_sbss
 80006a0:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80006a4:	200001a4 	.word	0x200001a4

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>

080006aa <HMC5883_Init>:

#define HMC5883_SLA 0x1e



HMC5883_Stat_t HMC5883_Init(HMC5883_t *Compass) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]


	//Default Configurations
	Compass->Config_A = (0b11110000); //1 bit must be high, 8 samples,(15Hz)Output Data Rate,Normal mode
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	22f0      	movs	r2, #240	; 0xf0
 80006b6:	701a      	strb	r2, [r3, #0]
	Compass->Config_B = (0b00100000);   //Gain =1090(LSB/Gauss), 4 Reserved bits
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2220      	movs	r2, #32
 80006bc:	709a      	strb	r2, [r3, #2]
	Compass->Mode_Register = (0b00000001); //6 Reserved bits, Single Measure mood
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2201      	movs	r2, #1
 80006c2:	711a      	strb	r2, [r3, #4]

	uint8_t OK = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]

	Compass->TxBuffer[0] = 0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	75da      	strb	r2, [r3, #23]
	Compass->TxBuffer[1] = Compass->Config_A;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	761a      	strb	r2, [r3, #24]
	Compass->TxBuffer[2] = Compass->Config_B;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	765a      	strb	r2, [r3, #25]
	Compass->TxBuffer[3] = Compass->Mode_Register;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791a      	ldrb	r2, [r3, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	769a      	strb	r2, [r3, #26]

	//Sending Buffer of default configurations
	OK |= I2C_Write(Compass, HMC5883_SLA, Compass->TxBuffer, 4);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f103 0217 	add.w	r2, r3, #23
 80006ec:	2304      	movs	r3, #4
 80006ee:	211e      	movs	r1, #30
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff fd33 	bl	800015c <I2C_Write>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fe:	4313      	orrs	r3, r2
 8000700:	b25b      	sxtb	r3, r3
 8000702:	73fb      	strb	r3, [r7, #15]

	//Acknowledgement check
	if (OK) {
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HMC5883_Init+0x64>
		return (HMC5883_ERROR);
 800070a:	2301      	movs	r3, #1
 800070c:	e000      	b.n	8000710 <HMC5883_Init+0x66>

	}

	else {
		return (HMC5883_OK);
 800070e:	2300      	movs	r3, #0
	}

}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HMC5883_Get_Readings>:
		return (HMC5883_OK);
	}

}

HMC5883_Stat_t HMC5883_Get_Readings(HMC5883_t *Compass) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

	uint8_t OK = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	73fb      	strb	r3, [r7, #15]

	Compass->RxBuffer[0] = 3;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2203      	movs	r2, #3
 8000728:	76da      	strb	r2, [r3, #27]

	OK |= I2C_Read(Compass, HMC5883_SLA, Compass->RxBuffer, 8);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f103 021b 	add.w	r2, r3, #27
 8000730:	2308      	movs	r3, #8
 8000732:	211e      	movs	r1, #30
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fd33 	bl	80001a0 <I2C_Read>
 800073a:	4603      	mov	r3, r0
 800073c:	b25a      	sxtb	r2, r3
 800073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000742:	4313      	orrs	r3, r2
 8000744:	b25b      	sxtb	r3, r3
 8000746:	73fb      	strb	r3, [r7, #15]

	Compass->RxBuffer[0]=0x00;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	76da      	strb	r2, [r3, #27]
	Compass->X_MSB_Register = Compass->RxBuffer[1];
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7f1b      	ldrb	r3, [r3, #28]
 8000752:	b25a      	sxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	721a      	strb	r2, [r3, #8]
	Compass->X_LSB_Register = Compass->RxBuffer[2];
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7f5a      	ldrb	r2, [r3, #29]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	725a      	strb	r2, [r3, #9]
	Compass->X_Output_Data = (Compass->X_MSB_Register << 4)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000766:	011b      	lsls	r3, r3, #4
			| (Compass->X_LSB_Register);
 8000768:	b21a      	sxth	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7a5b      	ldrb	r3, [r3, #9]
 800076e:	b21b      	sxth	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b21a      	sxth	r2, r3
	Compass->X_Output_Data = (Compass->X_MSB_Register << 4)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	80da      	strh	r2, [r3, #6]

	Compass->Y_MSB_Register = Compass->RxBuffer[3];
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	7f9b      	ldrb	r3, [r3, #30]
 800077c:	b25a      	sxtb	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	731a      	strb	r2, [r3, #12]
	Compass->Y_LSB_Register = Compass->RxBuffer[4];
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7fda      	ldrb	r2, [r3, #31]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	735a      	strb	r2, [r3, #13]
	Compass->Y_Output_Data = (Compass->Y_MSB_Register << 4)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000790:	011b      	lsls	r3, r3, #4
			| (Compass->Y_LSB_Register);
 8000792:	b21a      	sxth	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	7b5b      	ldrb	r3, [r3, #13]
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21a      	sxth	r2, r3
	Compass->Y_Output_Data = (Compass->Y_MSB_Register << 4)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	815a      	strh	r2, [r3, #10]

	Compass->Z_MSB_Register = Compass->RxBuffer[5];
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007a8:	b25a      	sxtb	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	741a      	strb	r2, [r3, #16]
	Compass->Z_LSB_Register = Compass->RxBuffer[6];
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	745a      	strb	r2, [r3, #17]
	Compass->Z_Output_Data = (Compass->Z_MSB_Register << 4)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80007be:	011b      	lsls	r3, r3, #4
			| (Compass->Z_LSB_Register);
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7c5b      	ldrb	r3, [r3, #17]
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b21a      	sxth	r2, r3
	Compass->Z_Output_Data = (Compass->Z_MSB_Register << 4)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	81da      	strh	r2, [r3, #14]

	Compass->RDY = Compass->RxBuffer[7];
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	b2d9      	uxtb	r1, r3
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	7cd3      	ldrb	r3, [r2, #19]
 80007e0:	f361 0300 	bfi	r3, r1, #0, #1
 80007e4:	74d3      	strb	r3, [r2, #19]

	Compass->RDY = Compass->RxBuffer[7]>>1;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	b2d9      	uxtb	r1, r3
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	7cd3      	ldrb	r3, [r2, #19]
 80007fa:	f361 0300 	bfi	r3, r1, #0, #1
 80007fe:	74d3      	strb	r3, [r2, #19]


	if (OK) {
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HMC5883_Get_Readings+0xf2>
			return (HMC5883_ERROR);
 8000806:	2301      	movs	r3, #1
 8000808:	e000      	b.n	800080c <HMC5883_Get_Readings+0xf4>

		}

		else {
			return (HMC5883_OK);
 800080a:	2300      	movs	r3, #0
		}

}
 800080c:	4618      	mov	r0, r3
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x28>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f92b 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	200f      	movs	r0, #15
 800082c:	f000 f808 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff fdf6 	bl	8000420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x54>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x58>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f935 	bl	8000ace <HAL_SYSTICK_Config>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00e      	b.n	800088c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d80a      	bhi.n	800088a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 f90b 	bl	8000a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_InitTick+0x5c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000034 	.word	0x20000034
 8000898:	2000003c 	.word	0x2000003c
 800089c:	20000038 	.word	0x20000038

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <HAL_IncTick+0x20>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	2000003c 	.word	0x2000003c
 80008c0:	20000190 	.word	0x20000190

080008c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	20000190 	.word	0x20000190

080008d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff fff0 	bl	80008c4 <HAL_GetTick>
 80008e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f0:	d005      	beq.n	80008fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_Delay+0x44>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008fe:	bf00      	nop
 8000900:	f7ff ffe0 	bl	80008c4 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f7      	bhi.n	8000900 <HAL_Delay+0x28>
  {
  }
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000003c 	.word	0x2000003c

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	; (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	; 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a4c:	d301      	bcc.n	8000a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00f      	b.n	8000a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <SysTick_Config+0x40>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f7ff ff90 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <SysTick_Config+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SysTick_Config+0x40>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff49 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa8:	f7ff ff5e 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	6978      	ldr	r0, [r7, #20]
 8000ab4:	f7ff ff90 	bl	80009d8 <NVIC_EncodePriority>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff5f 	bl	8000984 <__NVIC_SetPriority>
}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffb0 	bl	8000a3c <SysTick_Config>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b08b      	sub	sp, #44	; 0x2c
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	e169      	b.n	8000dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000afc:	2201      	movs	r2, #1
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	f040 8158 	bne.w	8000dca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a9a      	ldr	r2, [pc, #616]	; (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d05e      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b24:	4a98      	ldr	r2, [pc, #608]	; (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d875      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b2a:	4a98      	ldr	r2, [pc, #608]	; (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d058      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b30:	4a96      	ldr	r2, [pc, #600]	; (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d86f      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b36:	4a96      	ldr	r2, [pc, #600]	; (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d052      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b3c:	4a94      	ldr	r2, [pc, #592]	; (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d869      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b42:	4a94      	ldr	r2, [pc, #592]	; (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d04c      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b48:	4a92      	ldr	r2, [pc, #584]	; (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d863      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b4e:	4a92      	ldr	r2, [pc, #584]	; (8000d98 <HAL_GPIO_Init+0x2b0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d046      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b54:	4a90      	ldr	r2, [pc, #576]	; (8000d98 <HAL_GPIO_Init+0x2b0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d85d      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d82a      	bhi.n	8000bb4 <HAL_GPIO_Init+0xcc>
 8000b5e:	2b12      	cmp	r3, #18
 8000b60:	d859      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b62:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <HAL_GPIO_Init+0x80>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000be3 	.word	0x08000be3
 8000b6c:	08000bbd 	.word	0x08000bbd
 8000b70:	08000bcf 	.word	0x08000bcf
 8000b74:	08000c11 	.word	0x08000c11
 8000b78:	08000c17 	.word	0x08000c17
 8000b7c:	08000c17 	.word	0x08000c17
 8000b80:	08000c17 	.word	0x08000c17
 8000b84:	08000c17 	.word	0x08000c17
 8000b88:	08000c17 	.word	0x08000c17
 8000b8c:	08000c17 	.word	0x08000c17
 8000b90:	08000c17 	.word	0x08000c17
 8000b94:	08000c17 	.word	0x08000c17
 8000b98:	08000c17 	.word	0x08000c17
 8000b9c:	08000c17 	.word	0x08000c17
 8000ba0:	08000c17 	.word	0x08000c17
 8000ba4:	08000c17 	.word	0x08000c17
 8000ba8:	08000c17 	.word	0x08000c17
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000bd9 	.word	0x08000bd9
 8000bb4:	4a79      	ldr	r2, [pc, #484]	; (8000d9c <HAL_GPIO_Init+0x2b4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d013      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bba:	e02c      	b.n	8000c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	623b      	str	r3, [r7, #32]
          break;
 8000bc2:	e029      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	e024      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	623b      	str	r3, [r7, #32]
          break;
 8000bd6:	e01f      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	330c      	adds	r3, #12
 8000bde:	623b      	str	r3, [r7, #32]
          break;
 8000be0:	e01a      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d102      	bne.n	8000bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bea:	2304      	movs	r3, #4
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e013      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d105      	bne.n	8000c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69fa      	ldr	r2, [r7, #28]
 8000c00:	611a      	str	r2, [r3, #16]
          break;
 8000c02:	e009      	b.n	8000c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c04:	2308      	movs	r3, #8
 8000c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	615a      	str	r2, [r3, #20]
          break;
 8000c0e:	e003      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
          break;
 8000c14:	e000      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          break;
 8000c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2bff      	cmp	r3, #255	; 0xff
 8000c1c:	d801      	bhi.n	8000c22 <HAL_GPIO_Init+0x13a>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	e001      	b.n	8000c26 <HAL_GPIO_Init+0x13e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3304      	adds	r3, #4
 8000c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	2bff      	cmp	r3, #255	; 0xff
 8000c2c:	d802      	bhi.n	8000c34 <HAL_GPIO_Init+0x14c>
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_Init+0x152>
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	3b08      	subs	r3, #8
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	210f      	movs	r1, #15
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	6a39      	ldr	r1, [r7, #32]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	431a      	orrs	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 80b1 	beq.w	8000dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c68:	4b4d      	ldr	r3, [pc, #308]	; (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a4c      	ldr	r2, [pc, #304]	; (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b4a      	ldr	r3, [pc, #296]	; (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c80:	4a48      	ldr	r2, [pc, #288]	; (8000da4 <HAL_GPIO_Init+0x2bc>)
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	3302      	adds	r3, #2
 8000c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a40      	ldr	r2, [pc, #256]	; (8000da8 <HAL_GPIO_Init+0x2c0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d013      	beq.n	8000cd4 <HAL_GPIO_Init+0x1ec>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3f      	ldr	r2, [pc, #252]	; (8000dac <HAL_GPIO_Init+0x2c4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d00d      	beq.n	8000cd0 <HAL_GPIO_Init+0x1e8>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3e      	ldr	r2, [pc, #248]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d007      	beq.n	8000ccc <HAL_GPIO_Init+0x1e4>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a3d      	ldr	r2, [pc, #244]	; (8000db4 <HAL_GPIO_Init+0x2cc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d101      	bne.n	8000cc8 <HAL_GPIO_Init+0x1e0>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e006      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cc8:	2304      	movs	r3, #4
 8000cca:	e004      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000ccc:	2302      	movs	r3, #2
 8000cce:	e002      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd8:	f002 0203 	and.w	r2, r2, #3
 8000cdc:	0092      	lsls	r2, r2, #2
 8000cde:	4093      	lsls	r3, r2
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ce6:	492f      	ldr	r1, [pc, #188]	; (8000da4 <HAL_GPIO_Init+0x2bc>)
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3302      	adds	r3, #2
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d006      	beq.n	8000d0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	492c      	ldr	r1, [pc, #176]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	608b      	str	r3, [r1, #8]
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	4928      	ldr	r1, [pc, #160]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d18:	4013      	ands	r3, r2
 8000d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d28:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	4922      	ldr	r1, [pc, #136]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60cb      	str	r3, [r1, #12]
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d36:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	491e      	ldr	r1, [pc, #120]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	4918      	ldr	r1, [pc, #96]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4914      	ldr	r1, [pc, #80]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d021      	beq.n	8000dbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	490e      	ldr	r1, [pc, #56]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
 8000d84:	e021      	b.n	8000dca <HAL_GPIO_Init+0x2e2>
 8000d86:	bf00      	nop
 8000d88:	10320000 	.word	0x10320000
 8000d8c:	10310000 	.word	0x10310000
 8000d90:	10220000 	.word	0x10220000
 8000d94:	10210000 	.word	0x10210000
 8000d98:	10120000 	.word	0x10120000
 8000d9c:	10110000 	.word	0x10110000
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010000 	.word	0x40010000
 8000da8:	40010800 	.word	0x40010800
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40011000 	.word	0x40011000
 8000db4:	40011400 	.word	0x40011400
 8000db8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_GPIO_Init+0x304>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	4909      	ldr	r1, [pc, #36]	; (8000dec <HAL_GPIO_Init+0x304>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	3301      	adds	r3, #1
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f47f ae8e 	bne.w	8000afc <HAL_GPIO_Init+0x14>
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	372c      	adds	r7, #44	; 0x2c
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40010400 	.word	0x40010400

08000df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e12b      	b.n	800105a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d106      	bne.n	8000e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fb34 	bl	8000484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2224      	movs	r2, #36	; 0x24
 8000e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 0201 	bic.w	r2, r2, #1
 8000e32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e54:	f001 fbca 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8000e58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4a81      	ldr	r2, [pc, #516]	; (8001064 <HAL_I2C_Init+0x274>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d807      	bhi.n	8000e74 <HAL_I2C_Init+0x84>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4a80      	ldr	r2, [pc, #512]	; (8001068 <HAL_I2C_Init+0x278>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	bf94      	ite	ls
 8000e6c:	2301      	movls	r3, #1
 8000e6e:	2300      	movhi	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	e006      	b.n	8000e82 <HAL_I2C_Init+0x92>
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4a7d      	ldr	r2, [pc, #500]	; (800106c <HAL_I2C_Init+0x27c>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	bf94      	ite	ls
 8000e7c:	2301      	movls	r3, #1
 8000e7e:	2300      	movhi	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e0e7      	b.n	800105a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4a78      	ldr	r2, [pc, #480]	; (8001070 <HAL_I2C_Init+0x280>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	0c9b      	lsrs	r3, r3, #18
 8000e94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4a6a      	ldr	r2, [pc, #424]	; (8001064 <HAL_I2C_Init+0x274>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d802      	bhi.n	8000ec4 <HAL_I2C_Init+0xd4>
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	e009      	b.n	8000ed8 <HAL_I2C_Init+0xe8>
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000eca:	fb02 f303 	mul.w	r3, r2, r3
 8000ece:	4a69      	ldr	r2, [pc, #420]	; (8001074 <HAL_I2C_Init+0x284>)
 8000ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed4:	099b      	lsrs	r3, r3, #6
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	6812      	ldr	r2, [r2, #0]
 8000edc:	430b      	orrs	r3, r1
 8000ede:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000eea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	495c      	ldr	r1, [pc, #368]	; (8001064 <HAL_I2C_Init+0x274>)
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d819      	bhi.n	8000f2c <HAL_I2C_Init+0x13c>
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	1e59      	subs	r1, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f06:	1c59      	adds	r1, r3, #1
 8000f08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00a      	beq.n	8000f28 <HAL_I2C_Init+0x138>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	1e59      	subs	r1, r3, #1
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f20:	3301      	adds	r3, #1
 8000f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f26:	e051      	b.n	8000fcc <HAL_I2C_Init+0x1dc>
 8000f28:	2304      	movs	r3, #4
 8000f2a:	e04f      	b.n	8000fcc <HAL_I2C_Init+0x1dc>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d111      	bne.n	8000f58 <HAL_I2C_Init+0x168>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6859      	ldr	r1, [r3, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	440b      	add	r3, r1
 8000f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f46:	3301      	adds	r3, #1
 8000f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf0c      	ite	eq
 8000f50:	2301      	moveq	r3, #1
 8000f52:	2300      	movne	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	e012      	b.n	8000f7e <HAL_I2C_Init+0x18e>
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	1e58      	subs	r0, r3, #1
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6859      	ldr	r1, [r3, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	0099      	lsls	r1, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf0c      	ite	eq
 8000f78:	2301      	moveq	r3, #1
 8000f7a:	2300      	movne	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_I2C_Init+0x196>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e022      	b.n	8000fcc <HAL_I2C_Init+0x1dc>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10e      	bne.n	8000fac <HAL_I2C_Init+0x1bc>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	1e58      	subs	r0, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6859      	ldr	r1, [r3, #4]
 8000f96:	460b      	mov	r3, r1
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	440b      	add	r3, r1
 8000f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000faa:	e00f      	b.n	8000fcc <HAL_I2C_Init+0x1dc>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	1e58      	subs	r0, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6859      	ldr	r1, [r3, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	0099      	lsls	r1, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	6809      	ldr	r1, [r1, #0]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69da      	ldr	r2, [r3, #28]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000ffa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6911      	ldr	r1, [r2, #16]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68d2      	ldr	r2, [r2, #12]
 8001006:	4311      	orrs	r1, r2
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	430b      	orrs	r3, r1
 800100e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	695a      	ldr	r2, [r3, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 0201 	orr.w	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2220      	movs	r2, #32
 8001046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	000186a0 	.word	0x000186a0
 8001068:	001e847f 	.word	0x001e847f
 800106c:	003d08ff 	.word	0x003d08ff
 8001070:	431bde83 	.word	0x431bde83
 8001074:	10624dd3 	.word	0x10624dd3

08001078 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af02      	add	r7, sp, #8
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	460b      	mov	r3, r1
 8001086:	817b      	strh	r3, [r7, #10]
 8001088:	4613      	mov	r3, r2
 800108a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff fc1a 	bl	80008c4 <HAL_GetTick>
 8001090:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b20      	cmp	r3, #32
 800109c:	f040 80e0 	bne.w	8001260 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2319      	movs	r3, #25
 80010a6:	2201      	movs	r2, #1
 80010a8:	4970      	ldr	r1, [pc, #448]	; (800126c <HAL_I2C_Master_Transmit+0x1f4>)
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 fc9e 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80010b6:	2302      	movs	r3, #2
 80010b8:	e0d3      	b.n	8001262 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d101      	bne.n	80010c8 <HAL_I2C_Master_Transmit+0x50>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e0cc      	b.n	8001262 <HAL_I2C_Master_Transmit+0x1ea>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d007      	beq.n	80010ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 0201 	orr.w	r2, r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2221      	movs	r2, #33	; 0x21
 8001102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2210      	movs	r2, #16
 800110a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	893a      	ldrh	r2, [r7, #8]
 800111e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001124:	b29a      	uxth	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4a50      	ldr	r2, [pc, #320]	; (8001270 <HAL_I2C_Master_Transmit+0x1f8>)
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001130:	8979      	ldrh	r1, [r7, #10]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	6a3a      	ldr	r2, [r7, #32]
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 fb08 	bl	800174c <I2C_MasterRequestWrite>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e08d      	b.n	8001262 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800115c:	e066      	b.n	800122c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	6a39      	ldr	r1, [r7, #32]
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 fd5c 	bl	8001c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00d      	beq.n	800118a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	2b04      	cmp	r3, #4
 8001174:	d107      	bne.n	8001186 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001184:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e06b      	b.n	8001262 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	3b01      	subs	r3, #1
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d11b      	bne.n	8001200 <HAL_I2C_Master_Transmit+0x188>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d017      	beq.n	8001200 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	3b01      	subs	r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f8:	3b01      	subs	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	6a39      	ldr	r1, [r7, #32]
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 fd53 	bl	8001cb0 <I2C_WaitOnBTFFlagUntilTimeout>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00d      	beq.n	800122c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	2b04      	cmp	r3, #4
 8001216:	d107      	bne.n	8001228 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001226:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e01a      	b.n	8001262 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001230:	2b00      	cmp	r3, #0
 8001232:	d194      	bne.n	800115e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2220      	movs	r2, #32
 8001248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	e000      	b.n	8001262 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001260:	2302      	movs	r3, #2
  }
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	00100002 	.word	0x00100002
 8001270:	ffff0000 	.word	0xffff0000

08001274 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	; 0x30
 8001278:	af02      	add	r7, sp, #8
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	461a      	mov	r2, r3
 8001280:	460b      	mov	r3, r1
 8001282:	817b      	strh	r3, [r7, #10]
 8001284:	4613      	mov	r3, r2
 8001286:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff fb1a 	bl	80008c4 <HAL_GetTick>
 8001290:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b20      	cmp	r3, #32
 800129c:	f040 824b 	bne.w	8001736 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2319      	movs	r3, #25
 80012a6:	2201      	movs	r2, #1
 80012a8:	497f      	ldr	r1, [pc, #508]	; (80014a8 <HAL_I2C_Master_Receive+0x234>)
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f000 fb9e 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80012b6:	2302      	movs	r3, #2
 80012b8:	e23e      	b.n	8001738 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_I2C_Master_Receive+0x54>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e237      	b.n	8001738 <HAL_I2C_Master_Receive+0x4c4>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d007      	beq.n	80012ee <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0201 	orr.w	r2, r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2222      	movs	r2, #34	; 0x22
 8001302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2210      	movs	r2, #16
 800130a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	893a      	ldrh	r2, [r7, #8]
 800131e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001324:	b29a      	uxth	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4a5f      	ldr	r2, [pc, #380]	; (80014ac <HAL_I2C_Master_Receive+0x238>)
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001330:	8979      	ldrh	r1, [r7, #10]
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 fa8a 	bl	8001850 <I2C_MasterRequestRead>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e1f8      	b.n	8001738 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134a:	2b00      	cmp	r3, #0
 800134c:	d113      	bne.n	8001376 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e1cc      	b.n	8001710 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137a:	2b01      	cmp	r3, #1
 800137c:	d11e      	bne.n	80013bc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800138c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800138e:	b672      	cpsid	i
}
 8001390:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013b8:	b662      	cpsie	i
}
 80013ba:	e035      	b.n	8001428 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d11e      	bne.n	8001402 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013fe:	b662      	cpsie	i
}
 8001400:	e012      	b.n	8001428 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001428:	e172      	b.n	8001710 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142e:	2b03      	cmp	r3, #3
 8001430:	f200 811f 	bhi.w	8001672 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001438:	2b01      	cmp	r3, #1
 800143a:	d123      	bne.n	8001484 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800143c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 fc7d 	bl	8001d40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e173      	b.n	8001738 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146c:	3b01      	subs	r3, #1
 800146e:	b29a      	uxth	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001478:	b29b      	uxth	r3, r3
 800147a:	3b01      	subs	r3, #1
 800147c:	b29a      	uxth	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001482:	e145      	b.n	8001710 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001488:	2b02      	cmp	r3, #2
 800148a:	d152      	bne.n	8001532 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001492:	2200      	movs	r2, #0
 8001494:	4906      	ldr	r1, [pc, #24]	; (80014b0 <HAL_I2C_Master_Receive+0x23c>)
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 faa8 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d008      	beq.n	80014b4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e148      	b.n	8001738 <HAL_I2C_Master_Receive+0x4c4>
 80014a6:	bf00      	nop
 80014a8:	00100002 	.word	0x00100002
 80014ac:	ffff0000 	.word	0xffff0000
 80014b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80014fa:	b662      	cpsie	i
}
 80014fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151a:	3b01      	subs	r3, #1
 800151c:	b29a      	uxth	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001526:	b29b      	uxth	r3, r3
 8001528:	3b01      	subs	r3, #1
 800152a:	b29a      	uxth	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001530:	e0ee      	b.n	8001710 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001538:	2200      	movs	r2, #0
 800153a:	4981      	ldr	r1, [pc, #516]	; (8001740 <HAL_I2C_Master_Receive+0x4cc>)
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 fa55 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0f5      	b.n	8001738 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800155a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157c:	3b01      	subs	r3, #1
 800157e:	b29a      	uxth	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001588:	b29b      	uxth	r3, r3
 800158a:	3b01      	subs	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001592:	4b6c      	ldr	r3, [pc, #432]	; (8001744 <HAL_I2C_Master_Receive+0x4d0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	4a6b      	ldr	r2, [pc, #428]	; (8001748 <HAL_I2C_Master_Receive+0x4d4>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	0a1a      	lsrs	r2, r3, #8
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00da      	lsls	r2, r3, #3
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d118      	bne.n	80015ea <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2220      	movs	r2, #32
 80015c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f043 0220 	orr.w	r2, r3, #32
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80015da:	b662      	cpsie	i
}
 80015dc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e0a6      	b.n	8001738 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d1d9      	bne.n	80015ac <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001624:	3b01      	subs	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001630:	b29b      	uxth	r3, r3
 8001632:	3b01      	subs	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800163a:	b662      	cpsie	i
}
 800163c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001666:	b29b      	uxth	r3, r3
 8001668:	3b01      	subs	r3, #1
 800166a:	b29a      	uxth	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001670:	e04e      	b.n	8001710 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fb62 	bl	8001d40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e058      	b.n	8001738 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d124      	bne.n	8001710 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d107      	bne.n	80016de <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016dc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001706:	b29b      	uxth	r3, r3
 8001708:	3b01      	subs	r3, #1
 800170a:	b29a      	uxth	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001714:	2b00      	cmp	r3, #0
 8001716:	f47f ae88 	bne.w	800142a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2220      	movs	r2, #32
 800171e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001736:	2302      	movs	r3, #2
  }
}
 8001738:	4618      	mov	r0, r3
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	00010004 	.word	0x00010004
 8001744:	20000034 	.word	0x20000034
 8001748:	14f8b589 	.word	0x14f8b589

0800174c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af02      	add	r7, sp, #8
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	460b      	mov	r3, r1
 800175a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b08      	cmp	r3, #8
 8001766:	d006      	beq.n	8001776 <I2C_MasterRequestWrite+0x2a>
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d003      	beq.n	8001776 <I2C_MasterRequestWrite+0x2a>
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001774:	d108      	bne.n	8001788 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e00b      	b.n	80017a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	2b12      	cmp	r3, #18
 800178e:	d107      	bne.n	80017a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800179e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f91d 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00d      	beq.n	80017d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017c6:	d103      	bne.n	80017d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e035      	b.n	8001840 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017dc:	d108      	bne.n	80017f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017de:	897b      	ldrh	r3, [r7, #10]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	e01b      	b.n	8001828 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017f0:	897b      	ldrh	r3, [r7, #10]
 80017f2:	11db      	asrs	r3, r3, #7
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f003 0306 	and.w	r3, r3, #6
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f063 030f 	orn	r3, r3, #15
 8001800:	b2da      	uxtb	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	490e      	ldr	r1, [pc, #56]	; (8001848 <I2C_MasterRequestWrite+0xfc>)
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f966 	bl	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e010      	b.n	8001840 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800181e:	897b      	ldrh	r3, [r7, #10]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4907      	ldr	r1, [pc, #28]	; (800184c <I2C_MasterRequestWrite+0x100>)
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f956 	bl	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	00010008 	.word	0x00010008
 800184c:	00010002 	.word	0x00010002

08001850 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af02      	add	r7, sp, #8
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	460b      	mov	r3, r1
 800185e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001874:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b08      	cmp	r3, #8
 800187a:	d006      	beq.n	800188a <I2C_MasterRequestRead+0x3a>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d003      	beq.n	800188a <I2C_MasterRequestRead+0x3a>
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001888:	d108      	bne.n	800189c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e00b      	b.n	80018b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	2b11      	cmp	r3, #17
 80018a2:	d107      	bne.n	80018b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f893 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00d      	beq.n	80018e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018da:	d103      	bne.n	80018e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e079      	b.n	80019dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018f0:	d108      	bne.n	8001904 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018f2:	897b      	ldrh	r3, [r7, #10]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	611a      	str	r2, [r3, #16]
 8001902:	e05f      	b.n	80019c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001904:	897b      	ldrh	r3, [r7, #10]
 8001906:	11db      	asrs	r3, r3, #7
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f003 0306 	and.w	r3, r3, #6
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f063 030f 	orn	r3, r3, #15
 8001914:	b2da      	uxtb	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4930      	ldr	r1, [pc, #192]	; (80019e4 <I2C_MasterRequestRead+0x194>)
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f8dc 	bl	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e054      	b.n	80019dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001932:	897b      	ldrh	r3, [r7, #10]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4929      	ldr	r1, [pc, #164]	; (80019e8 <I2C_MasterRequestRead+0x198>)
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f8cc 	bl	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e044      	b.n	80019dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001976:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f831 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00d      	beq.n	80019ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800199e:	d103      	bne.n	80019a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e017      	b.n	80019dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80019ac:	897b      	ldrh	r3, [r7, #10]
 80019ae:	11db      	asrs	r3, r3, #7
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f003 0306 	and.w	r3, r3, #6
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f063 030e 	orn	r3, r3, #14
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <I2C_MasterRequestRead+0x198>)
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f888 	bl	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	00010008 	.word	0x00010008
 80019e8:	00010002 	.word	0x00010002

080019ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019fc:	e048      	b.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d044      	beq.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a06:	f7fe ff5d 	bl	80008c4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d302      	bcc.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d139      	bne.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	0c1b      	lsrs	r3, r3, #16
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d10d      	bne.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	4013      	ands	r3, r2
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	e00c      	b.n	8001a5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	43da      	mvns	r2, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf0c      	ite	eq
 8001a54:	2301      	moveq	r3, #1
 8001a56:	2300      	movne	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d116      	bne.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e023      	b.n	8001ad8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10d      	bne.n	8001ab6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	e00c      	b.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	43da      	mvns	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d093      	beq.n	80019fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001aee:	e071      	b.n	8001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afe:	d123      	bne.n	8001b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f043 0204 	orr.w	r2, r3, #4
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e067      	b.n	8001c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4e:	d041      	beq.n	8001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b50:	f7fe feb8 	bl	80008c4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d302      	bcc.n	8001b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d136      	bne.n	8001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	0c1b      	lsrs	r3, r3, #16
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d10c      	bne.n	8001b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	e00b      	b.n	8001ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	43da      	mvns	r2, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	4013      	ands	r3, r2
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d016      	beq.n	8001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e021      	b.n	8001c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d10c      	bne.n	8001bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	43da      	mvns	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	4013      	ands	r3, r2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf14      	ite	ne
 8001bf0:	2301      	movne	r3, #1
 8001bf2:	2300      	moveq	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	e00b      	b.n	8001c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4013      	ands	r3, r2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf14      	ite	ne
 8001c0a:	2301      	movne	r3, #1
 8001c0c:	2300      	moveq	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f47f af6d 	bne.w	8001af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c2c:	e034      	b.n	8001c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f8e3 	bl	8001dfa <I2C_IsAcknowledgeFailed>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e034      	b.n	8001ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c44:	d028      	beq.n	8001c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c46:	f7fe fe3d 	bl	80008c4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d302      	bcc.n	8001c5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11d      	bne.n	8001c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	2b80      	cmp	r3, #128	; 0x80
 8001c68:	d016      	beq.n	8001c98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e007      	b.n	8001ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca2:	2b80      	cmp	r3, #128	; 0x80
 8001ca4:	d1c3      	bne.n	8001c2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cbc:	e034      	b.n	8001d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f89b 	bl	8001dfa <I2C_IsAcknowledgeFailed>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e034      	b.n	8001d38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d028      	beq.n	8001d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd6:	f7fe fdf5 	bl	80008c4 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d302      	bcc.n	8001cec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d11d      	bne.n	8001d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d016      	beq.n	8001d28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f043 0220 	orr.w	r2, r3, #32
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e007      	b.n	8001d38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d1c3      	bne.n	8001cbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d4c:	e049      	b.n	8001de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d119      	bne.n	8001d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0210 	mvn.w	r2, #16
 8001d64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e030      	b.n	8001df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d90:	f7fe fd98 	bl	80008c4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d302      	bcc.n	8001da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d11d      	bne.n	8001de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db0:	2b40      	cmp	r3, #64	; 0x40
 8001db2:	d016      	beq.n	8001de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f043 0220 	orr.w	r2, r3, #32
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e007      	b.n	8001df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	d1ae      	bne.n	8001d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e10:	d11b      	bne.n	8001e4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f043 0204 	orr.w	r2, r3, #4
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e272      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8087 	beq.w	8001f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e78:	4b92      	ldr	r3, [pc, #584]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d00c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e84:	4b8f      	ldr	r3, [pc, #572]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d112      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
 8001e90:	4b8c      	ldr	r3, [pc, #560]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	4b89      	ldr	r3, [pc, #548]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d06c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x12c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d168      	bne.n	8001f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e24c      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x76>
 8001ec0:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a7f      	ldr	r2, [pc, #508]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e02e      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x98>
 8001ed6:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a7a      	ldr	r2, [pc, #488]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b78      	ldr	r3, [pc, #480]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a77      	ldr	r2, [pc, #476]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01d      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0xbc>
 8001efa:	4b72      	ldr	r3, [pc, #456]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a71      	ldr	r2, [pc, #452]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001f14:	4b6b      	ldr	r3, [pc, #428]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6a      	ldr	r2, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a67      	ldr	r2, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe fcc6 	bl	80008c4 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7fe fcc2 	bl	80008c4 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e200      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe4>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fcb2 	bl	80008c4 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe fcae 	bl	80008c4 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1ec      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x10c>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d063      	beq.n	800205a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f92:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1c0      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4939      	ldr	r1, [pc, #228]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	e03a      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fc67 	bl	80008c4 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7fe fc63 	bl	80008c4 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1a1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4927      	ldr	r1, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e015      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe fc46 	bl	80008c4 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203c:	f7fe fc42 	bl	80008c4 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e180      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d03a      	beq.n	80020dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7fe fc26 	bl	80008c4 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207c:	f7fe fc22 	bl	80008c4 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e160      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800209a:	2001      	movs	r0, #1
 800209c:	f000 face 	bl	800263c <RCC_Delay>
 80020a0:	e01c      	b.n	80020dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fc0c 	bl	80008c4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ae:	e00f      	b.n	80020d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b0:	f7fe fc08 	bl	80008c4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d908      	bls.n	80020d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e146      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	42420000 	.word	0x42420000
 80020cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	4b92      	ldr	r3, [pc, #584]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e9      	bne.n	80020b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a6 	beq.w	8002236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b8b      	ldr	r3, [pc, #556]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a87      	ldr	r2, [pc, #540]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b82      	ldr	r3, [pc, #520]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7e      	ldr	r2, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7fe fbc9 	bl	80008c4 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7fe fbc5 	bl	80008c4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b64      	cmp	r3, #100	; 0x64
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e103      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b75      	ldr	r3, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x312>
 800215c:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e02d      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x334>
 8002172:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a69      	ldr	r2, [pc, #420]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b67      	ldr	r3, [pc, #412]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a66      	ldr	r2, [pc, #408]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x356>
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a60      	ldr	r2, [pc, #384]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a5d      	ldr	r2, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a5a      	ldr	r2, [pc, #360]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b58      	ldr	r3, [pc, #352]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a57      	ldr	r2, [pc, #348]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7fe fb79 	bl	80008c4 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe fb75 	bl	80008c4 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0b1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ee      	beq.n	80021d6 <HAL_RCC_OscConfig+0x37e>
 80021f8:	e014      	b.n	8002224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe fb63 	bl	80008c4 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe fb5f 	bl	80008c4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e09b      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ee      	bne.n	8002202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a3b      	ldr	r2, [pc, #236]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8087 	beq.w	800234e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d061      	beq.n	8002310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d146      	bne.n	80022e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fb33 	bl	80008c4 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fb2f 	bl	80008c4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e06d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d108      	bne.n	800229c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4921      	ldr	r1, [pc, #132]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a19      	ldr	r1, [r3, #32]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	430b      	orrs	r3, r1
 80022ae:	491b      	ldr	r1, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe fb03 	bl	80008c4 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fe faff 	bl	80008c4 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e03d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x46a>
 80022e0:	e035      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe faec 	bl	80008c4 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fae8 	bl	80008c4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e026      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x498>
 800230e:	e01e      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d107      	bne.n	8002328 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e019      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	429a      	cmp	r2, r3
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0d0      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d910      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4965      	ldr	r1, [pc, #404]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d040      	beq.n	800247c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d115      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e073      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06b      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4936      	ldr	r1, [pc, #216]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800244c:	f7fe fa3a 	bl	80008c4 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7fe fa36 	bl	80008c4 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e053      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 020c 	and.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d1eb      	bne.n	8002454 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d210      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4922      	ldr	r1, [pc, #136]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1cc>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f998 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000
 8002520:	40021000 	.word	0x40021000
 8002524:	08003590 	.word	0x08003590
 8002528:	20000034 	.word	0x20000034
 800252c:	20000038 	.word	0x20000038

08002530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d002      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x30>
 800255a:	2b08      	cmp	r3, #8
 800255c:	d003      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x36>
 800255e:	e027      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002562:	613b      	str	r3, [r7, #16]
      break;
 8002564:	e027      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	0c9b      	lsrs	r3, r3, #18
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d010      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	0c5b      	lsrs	r3, r3, #17
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002592:	fb03 f202 	mul.w	r2, r3, r2
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e004      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	613b      	str	r3, [r7, #16]
      break;
 80025ae:	e002      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025b2:	613b      	str	r3, [r7, #16]
      break;
 80025b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b6:	693b      	ldr	r3, [r7, #16]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	080035a8 	.word	0x080035a8
 80025d0:	080035b8 	.word	0x080035b8
 80025d4:	003d0900 	.word	0x003d0900

080025d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b02      	ldr	r3, [pc, #8]	; (80025e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	20000034 	.word	0x20000034

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f0:	f7ff fff2 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4903      	ldr	r1, [pc, #12]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	080035a0 	.word	0x080035a0

08002614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002618:	f7ff ffde 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	0adb      	lsrs	r3, r3, #11
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	4903      	ldr	r1, [pc, #12]	; (8002638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800262a:	5ccb      	ldrb	r3, [r1, r3]
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	080035a0 	.word	0x080035a0

0800263c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <RCC_Delay+0x34>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <RCC_Delay+0x38>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0a5b      	lsrs	r3, r3, #9
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002658:	bf00      	nop
  }
  while (Delay --);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	60fa      	str	r2, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f9      	bne.n	8002658 <RCC_Delay+0x1c>
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	20000034 	.word	0x20000034
 8002674:	10624dd3 	.word	0x10624dd3

08002678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e04d      	b.n	8002726 <HAL_UART_Init+0xae>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d111      	bne.n	80026ba <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f926 	bl	80028f0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a20      	ldr	r2, [pc, #128]	; (8002730 <HAL_UART_Init+0xb8>)
 80026b0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2224      	movs	r2, #36	; 0x24
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f9fe 	bl	8002ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002706:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	08000501 	.word	0x08000501

08002734 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	d175      	bne.n	8002840 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_UART_Transmit+0x2c>
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e06e      	b.n	8002842 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2221      	movs	r2, #33	; 0x21
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002772:	f7fe f8a7 	bl	80008c4 <HAL_GetTick>
 8002776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278c:	d108      	bne.n	80027a0 <HAL_UART_Transmit+0x6c>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d104      	bne.n	80027a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	e003      	b.n	80027a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027a8:	e02e      	b.n	8002808 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2200      	movs	r2, #0
 80027b2:	2180      	movs	r1, #128	; 0x80
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f8d1 	bl	800295c <UART_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e03a      	b.n	8002842 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10b      	bne.n	80027ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	3302      	adds	r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	e007      	b.n	80027fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	3301      	adds	r3, #1
 80027f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1cb      	bne.n	80027aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2200      	movs	r2, #0
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f89d 	bl	800295c <UART_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e006      	b.n	8002842 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	e000      	b.n	8002842 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002840:	2302      	movs	r3, #2
  }
}
 8002842:	4618      	mov	r0, r3
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <UART_InitCallbacksToDefault+0x48>)
 80028fc:	649a      	str	r2, [r3, #72]	; 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a0e      	ldr	r2, [pc, #56]	; (800293c <UART_InitCallbacksToDefault+0x4c>)
 8002902:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <UART_InitCallbacksToDefault+0x50>)
 8002908:	651a      	str	r2, [r3, #80]	; 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <UART_InitCallbacksToDefault+0x54>)
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <UART_InitCallbacksToDefault+0x58>)
 8002914:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a0c      	ldr	r2, [pc, #48]	; (800294c <UART_InitCallbacksToDefault+0x5c>)
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <UART_InitCallbacksToDefault+0x60>)
 8002920:	661a      	str	r2, [r3, #96]	; 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <UART_InitCallbacksToDefault+0x64>)
 8002926:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <UART_InitCallbacksToDefault+0x68>)
 800292c:	66da      	str	r2, [r3, #108]	; 0x6c

}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	0800285d 	.word	0x0800285d
 800293c:	0800284b 	.word	0x0800284b
 8002940:	08002881 	.word	0x08002881
 8002944:	0800286f 	.word	0x0800286f
 8002948:	08002893 	.word	0x08002893
 800294c:	080028a5 	.word	0x080028a5
 8002950:	080028b7 	.word	0x080028b7
 8002954:	080028c9 	.word	0x080028c9
 8002958:	080028db 	.word	0x080028db

0800295c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800296c:	e03b      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d037      	beq.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002976:	f7fd ffa5 	bl	80008c4 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	429a      	cmp	r2, r3
 8002984:	d302      	bcc.n	800298c <UART_WaitOnFlagUntilTimeout+0x30>
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e03a      	b.n	8002a06 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d023      	beq.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b80      	cmp	r3, #128	; 0x80
 80029a2:	d020      	beq.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d01d      	beq.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d116      	bne.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f81d 	bl	8002a0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2208      	movs	r2, #8
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00f      	b.n	8002a06 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4013      	ands	r3, r2
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	bf0c      	ite	eq
 80029f6:	2301      	moveq	r3, #1
 80029f8:	2300      	movne	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d0b4      	beq.n	800296e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b095      	sub	sp, #84	; 0x54
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a20:	e853 3f00 	ldrex	r3, [r3]
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	330c      	adds	r3, #12
 8002a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a36:	643a      	str	r2, [r7, #64]	; 0x40
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e5      	bne.n	8002a16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3314      	adds	r3, #20
 8002a50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	e853 3f00 	ldrex	r3, [r3]
 8002a58:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3314      	adds	r3, #20
 8002a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a72:	e841 2300 	strex	r3, r2, [r1]
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1e5      	bne.n	8002a4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d119      	bne.n	8002aba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f023 0310 	bic.w	r3, r3, #16
 8002a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aa6:	61ba      	str	r2, [r7, #24]
 8002aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	6979      	ldr	r1, [r7, #20]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e5      	bne.n	8002a86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ac8:	bf00      	nop
 8002aca:	3754      	adds	r7, #84	; 0x54
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
	...

08002ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b0e:	f023 030c 	bic.w	r3, r3, #12
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2c      	ldr	r2, [pc, #176]	; (8002be8 <UART_SetConfig+0x114>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d103      	bne.n	8002b44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b3c:	f7ff fd6a 	bl	8002614 <HAL_RCC_GetPCLK2Freq>
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	e002      	b.n	8002b4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b44:	f7ff fd52 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8002b48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	009a      	lsls	r2, r3, #2
 8002b54:	441a      	add	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <UART_SetConfig+0x118>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	0119      	lsls	r1, r3, #4
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	009a      	lsls	r2, r3, #2
 8002b74:	441a      	add	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <UART_SetConfig+0x118>)
 8002b82:	fba3 0302 	umull	r0, r3, r3, r2
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2064      	movs	r0, #100	; 0x64
 8002b8a:	fb00 f303 	mul.w	r3, r0, r3
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	3332      	adds	r3, #50	; 0x32
 8002b94:	4a15      	ldr	r2, [pc, #84]	; (8002bec <UART_SetConfig+0x118>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba0:	4419      	add	r1, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	009a      	lsls	r2, r3, #2
 8002bac:	441a      	add	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <UART_SetConfig+0x118>)
 8002bba:	fba3 0302 	umull	r0, r3, r3, r2
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	2064      	movs	r0, #100	; 0x64
 8002bc2:	fb00 f303 	mul.w	r3, r0, r3
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	3332      	adds	r3, #50	; 0x32
 8002bcc:	4a07      	ldr	r2, [pc, #28]	; (8002bec <UART_SetConfig+0x118>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	f003 020f 	and.w	r2, r3, #15
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	440a      	add	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40013800 	.word	0x40013800
 8002bec:	51eb851f 	.word	0x51eb851f

08002bf0 <__errno>:
 8002bf0:	4b01      	ldr	r3, [pc, #4]	; (8002bf8 <__errno+0x8>)
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000040 	.word	0x20000040

08002bfc <__libc_init_array>:
 8002bfc:	b570      	push	{r4, r5, r6, lr}
 8002bfe:	2600      	movs	r6, #0
 8002c00:	4d0c      	ldr	r5, [pc, #48]	; (8002c34 <__libc_init_array+0x38>)
 8002c02:	4c0d      	ldr	r4, [pc, #52]	; (8002c38 <__libc_init_array+0x3c>)
 8002c04:	1b64      	subs	r4, r4, r5
 8002c06:	10a4      	asrs	r4, r4, #2
 8002c08:	42a6      	cmp	r6, r4
 8002c0a:	d109      	bne.n	8002c20 <__libc_init_array+0x24>
 8002c0c:	f000 fc9c 	bl	8003548 <_init>
 8002c10:	2600      	movs	r6, #0
 8002c12:	4d0a      	ldr	r5, [pc, #40]	; (8002c3c <__libc_init_array+0x40>)
 8002c14:	4c0a      	ldr	r4, [pc, #40]	; (8002c40 <__libc_init_array+0x44>)
 8002c16:	1b64      	subs	r4, r4, r5
 8002c18:	10a4      	asrs	r4, r4, #2
 8002c1a:	42a6      	cmp	r6, r4
 8002c1c:	d105      	bne.n	8002c2a <__libc_init_array+0x2e>
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
 8002c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c24:	4798      	blx	r3
 8002c26:	3601      	adds	r6, #1
 8002c28:	e7ee      	b.n	8002c08 <__libc_init_array+0xc>
 8002c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2e:	4798      	blx	r3
 8002c30:	3601      	adds	r6, #1
 8002c32:	e7f2      	b.n	8002c1a <__libc_init_array+0x1e>
 8002c34:	080035f0 	.word	0x080035f0
 8002c38:	080035f0 	.word	0x080035f0
 8002c3c:	080035f0 	.word	0x080035f0
 8002c40:	080035f4 	.word	0x080035f4

08002c44 <memset>:
 8002c44:	4603      	mov	r3, r0
 8002c46:	4402      	add	r2, r0
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d100      	bne.n	8002c4e <memset+0xa>
 8002c4c:	4770      	bx	lr
 8002c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c52:	e7f9      	b.n	8002c48 <memset+0x4>

08002c54 <siprintf>:
 8002c54:	b40e      	push	{r1, r2, r3}
 8002c56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c5a:	b500      	push	{lr}
 8002c5c:	b09c      	sub	sp, #112	; 0x70
 8002c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8002c60:	9002      	str	r0, [sp, #8]
 8002c62:	9006      	str	r0, [sp, #24]
 8002c64:	9107      	str	r1, [sp, #28]
 8002c66:	9104      	str	r1, [sp, #16]
 8002c68:	4808      	ldr	r0, [pc, #32]	; (8002c8c <siprintf+0x38>)
 8002c6a:	4909      	ldr	r1, [pc, #36]	; (8002c90 <siprintf+0x3c>)
 8002c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c70:	9105      	str	r1, [sp, #20]
 8002c72:	6800      	ldr	r0, [r0, #0]
 8002c74:	a902      	add	r1, sp, #8
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	f000 f868 	bl	8002d4c <_svfiprintf_r>
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	9b02      	ldr	r3, [sp, #8]
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	b01c      	add	sp, #112	; 0x70
 8002c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c88:	b003      	add	sp, #12
 8002c8a:	4770      	bx	lr
 8002c8c:	20000040 	.word	0x20000040
 8002c90:	ffff0208 	.word	0xffff0208

08002c94 <__ssputs_r>:
 8002c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c98:	688e      	ldr	r6, [r1, #8]
 8002c9a:	4682      	mov	sl, r0
 8002c9c:	429e      	cmp	r6, r3
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	4690      	mov	r8, r2
 8002ca2:	461f      	mov	r7, r3
 8002ca4:	d838      	bhi.n	8002d18 <__ssputs_r+0x84>
 8002ca6:	898a      	ldrh	r2, [r1, #12]
 8002ca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cac:	d032      	beq.n	8002d14 <__ssputs_r+0x80>
 8002cae:	6825      	ldr	r5, [r4, #0]
 8002cb0:	6909      	ldr	r1, [r1, #16]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	eba5 0901 	sub.w	r9, r5, r1
 8002cb8:	6965      	ldr	r5, [r4, #20]
 8002cba:	444b      	add	r3, r9
 8002cbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cc4:	106d      	asrs	r5, r5, #1
 8002cc6:	429d      	cmp	r5, r3
 8002cc8:	bf38      	it	cc
 8002cca:	461d      	movcc	r5, r3
 8002ccc:	0553      	lsls	r3, r2, #21
 8002cce:	d531      	bpl.n	8002d34 <__ssputs_r+0xa0>
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	f000 fb6f 	bl	80033b4 <_malloc_r>
 8002cd6:	4606      	mov	r6, r0
 8002cd8:	b950      	cbnz	r0, 8002cf0 <__ssputs_r+0x5c>
 8002cda:	230c      	movs	r3, #12
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce0:	f8ca 3000 	str.w	r3, [sl]
 8002ce4:	89a3      	ldrh	r3, [r4, #12]
 8002ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cea:	81a3      	strh	r3, [r4, #12]
 8002cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cf0:	464a      	mov	r2, r9
 8002cf2:	6921      	ldr	r1, [r4, #16]
 8002cf4:	f000 face 	bl	8003294 <memcpy>
 8002cf8:	89a3      	ldrh	r3, [r4, #12]
 8002cfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d02:	81a3      	strh	r3, [r4, #12]
 8002d04:	6126      	str	r6, [r4, #16]
 8002d06:	444e      	add	r6, r9
 8002d08:	6026      	str	r6, [r4, #0]
 8002d0a:	463e      	mov	r6, r7
 8002d0c:	6165      	str	r5, [r4, #20]
 8002d0e:	eba5 0509 	sub.w	r5, r5, r9
 8002d12:	60a5      	str	r5, [r4, #8]
 8002d14:	42be      	cmp	r6, r7
 8002d16:	d900      	bls.n	8002d1a <__ssputs_r+0x86>
 8002d18:	463e      	mov	r6, r7
 8002d1a:	4632      	mov	r2, r6
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	6820      	ldr	r0, [r4, #0]
 8002d20:	f000 fac6 	bl	80032b0 <memmove>
 8002d24:	68a3      	ldr	r3, [r4, #8]
 8002d26:	2000      	movs	r0, #0
 8002d28:	1b9b      	subs	r3, r3, r6
 8002d2a:	60a3      	str	r3, [r4, #8]
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	4433      	add	r3, r6
 8002d30:	6023      	str	r3, [r4, #0]
 8002d32:	e7db      	b.n	8002cec <__ssputs_r+0x58>
 8002d34:	462a      	mov	r2, r5
 8002d36:	f000 fbb1 	bl	800349c <_realloc_r>
 8002d3a:	4606      	mov	r6, r0
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d1e1      	bne.n	8002d04 <__ssputs_r+0x70>
 8002d40:	4650      	mov	r0, sl
 8002d42:	6921      	ldr	r1, [r4, #16]
 8002d44:	f000 face 	bl	80032e4 <_free_r>
 8002d48:	e7c7      	b.n	8002cda <__ssputs_r+0x46>
	...

08002d4c <_svfiprintf_r>:
 8002d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d50:	4698      	mov	r8, r3
 8002d52:	898b      	ldrh	r3, [r1, #12]
 8002d54:	4607      	mov	r7, r0
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	460d      	mov	r5, r1
 8002d5a:	4614      	mov	r4, r2
 8002d5c:	b09d      	sub	sp, #116	; 0x74
 8002d5e:	d50e      	bpl.n	8002d7e <_svfiprintf_r+0x32>
 8002d60:	690b      	ldr	r3, [r1, #16]
 8002d62:	b963      	cbnz	r3, 8002d7e <_svfiprintf_r+0x32>
 8002d64:	2140      	movs	r1, #64	; 0x40
 8002d66:	f000 fb25 	bl	80033b4 <_malloc_r>
 8002d6a:	6028      	str	r0, [r5, #0]
 8002d6c:	6128      	str	r0, [r5, #16]
 8002d6e:	b920      	cbnz	r0, 8002d7a <_svfiprintf_r+0x2e>
 8002d70:	230c      	movs	r3, #12
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	e0d1      	b.n	8002f1e <_svfiprintf_r+0x1d2>
 8002d7a:	2340      	movs	r3, #64	; 0x40
 8002d7c:	616b      	str	r3, [r5, #20]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	9309      	str	r3, [sp, #36]	; 0x24
 8002d82:	2320      	movs	r3, #32
 8002d84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d88:	2330      	movs	r3, #48	; 0x30
 8002d8a:	f04f 0901 	mov.w	r9, #1
 8002d8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f38 <_svfiprintf_r+0x1ec>
 8002d96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	469a      	mov	sl, r3
 8002d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002da2:	b10a      	cbz	r2, 8002da8 <_svfiprintf_r+0x5c>
 8002da4:	2a25      	cmp	r2, #37	; 0x25
 8002da6:	d1f9      	bne.n	8002d9c <_svfiprintf_r+0x50>
 8002da8:	ebba 0b04 	subs.w	fp, sl, r4
 8002dac:	d00b      	beq.n	8002dc6 <_svfiprintf_r+0x7a>
 8002dae:	465b      	mov	r3, fp
 8002db0:	4622      	mov	r2, r4
 8002db2:	4629      	mov	r1, r5
 8002db4:	4638      	mov	r0, r7
 8002db6:	f7ff ff6d 	bl	8002c94 <__ssputs_r>
 8002dba:	3001      	adds	r0, #1
 8002dbc:	f000 80aa 	beq.w	8002f14 <_svfiprintf_r+0x1c8>
 8002dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dc2:	445a      	add	r2, fp
 8002dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8002dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80a2 	beq.w	8002f14 <_svfiprintf_r+0x1c8>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dda:	f10a 0a01 	add.w	sl, sl, #1
 8002dde:	9304      	str	r3, [sp, #16]
 8002de0:	9307      	str	r3, [sp, #28]
 8002de2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002de6:	931a      	str	r3, [sp, #104]	; 0x68
 8002de8:	4654      	mov	r4, sl
 8002dea:	2205      	movs	r2, #5
 8002dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002df0:	4851      	ldr	r0, [pc, #324]	; (8002f38 <_svfiprintf_r+0x1ec>)
 8002df2:	f000 fa41 	bl	8003278 <memchr>
 8002df6:	9a04      	ldr	r2, [sp, #16]
 8002df8:	b9d8      	cbnz	r0, 8002e32 <_svfiprintf_r+0xe6>
 8002dfa:	06d0      	lsls	r0, r2, #27
 8002dfc:	bf44      	itt	mi
 8002dfe:	2320      	movmi	r3, #32
 8002e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e04:	0711      	lsls	r1, r2, #28
 8002e06:	bf44      	itt	mi
 8002e08:	232b      	movmi	r3, #43	; 0x2b
 8002e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e12:	2b2a      	cmp	r3, #42	; 0x2a
 8002e14:	d015      	beq.n	8002e42 <_svfiprintf_r+0xf6>
 8002e16:	4654      	mov	r4, sl
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f04f 0c0a 	mov.w	ip, #10
 8002e1e:	9a07      	ldr	r2, [sp, #28]
 8002e20:	4621      	mov	r1, r4
 8002e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e26:	3b30      	subs	r3, #48	; 0x30
 8002e28:	2b09      	cmp	r3, #9
 8002e2a:	d94e      	bls.n	8002eca <_svfiprintf_r+0x17e>
 8002e2c:	b1b0      	cbz	r0, 8002e5c <_svfiprintf_r+0x110>
 8002e2e:	9207      	str	r2, [sp, #28]
 8002e30:	e014      	b.n	8002e5c <_svfiprintf_r+0x110>
 8002e32:	eba0 0308 	sub.w	r3, r0, r8
 8002e36:	fa09 f303 	lsl.w	r3, r9, r3
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	46a2      	mov	sl, r4
 8002e3e:	9304      	str	r3, [sp, #16]
 8002e40:	e7d2      	b.n	8002de8 <_svfiprintf_r+0x9c>
 8002e42:	9b03      	ldr	r3, [sp, #12]
 8002e44:	1d19      	adds	r1, r3, #4
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	9103      	str	r1, [sp, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bfbb      	ittet	lt
 8002e4e:	425b      	neglt	r3, r3
 8002e50:	f042 0202 	orrlt.w	r2, r2, #2
 8002e54:	9307      	strge	r3, [sp, #28]
 8002e56:	9307      	strlt	r3, [sp, #28]
 8002e58:	bfb8      	it	lt
 8002e5a:	9204      	strlt	r2, [sp, #16]
 8002e5c:	7823      	ldrb	r3, [r4, #0]
 8002e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8002e60:	d10c      	bne.n	8002e7c <_svfiprintf_r+0x130>
 8002e62:	7863      	ldrb	r3, [r4, #1]
 8002e64:	2b2a      	cmp	r3, #42	; 0x2a
 8002e66:	d135      	bne.n	8002ed4 <_svfiprintf_r+0x188>
 8002e68:	9b03      	ldr	r3, [sp, #12]
 8002e6a:	3402      	adds	r4, #2
 8002e6c:	1d1a      	adds	r2, r3, #4
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	9203      	str	r2, [sp, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bfb8      	it	lt
 8002e76:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e7a:	9305      	str	r3, [sp, #20]
 8002e7c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002f3c <_svfiprintf_r+0x1f0>
 8002e80:	2203      	movs	r2, #3
 8002e82:	4650      	mov	r0, sl
 8002e84:	7821      	ldrb	r1, [r4, #0]
 8002e86:	f000 f9f7 	bl	8003278 <memchr>
 8002e8a:	b140      	cbz	r0, 8002e9e <_svfiprintf_r+0x152>
 8002e8c:	2340      	movs	r3, #64	; 0x40
 8002e8e:	eba0 000a 	sub.w	r0, r0, sl
 8002e92:	fa03 f000 	lsl.w	r0, r3, r0
 8002e96:	9b04      	ldr	r3, [sp, #16]
 8002e98:	3401      	adds	r4, #1
 8002e9a:	4303      	orrs	r3, r0
 8002e9c:	9304      	str	r3, [sp, #16]
 8002e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ea2:	2206      	movs	r2, #6
 8002ea4:	4826      	ldr	r0, [pc, #152]	; (8002f40 <_svfiprintf_r+0x1f4>)
 8002ea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eaa:	f000 f9e5 	bl	8003278 <memchr>
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	d038      	beq.n	8002f24 <_svfiprintf_r+0x1d8>
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <_svfiprintf_r+0x1f8>)
 8002eb4:	bb1b      	cbnz	r3, 8002efe <_svfiprintf_r+0x1b2>
 8002eb6:	9b03      	ldr	r3, [sp, #12]
 8002eb8:	3307      	adds	r3, #7
 8002eba:	f023 0307 	bic.w	r3, r3, #7
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	9303      	str	r3, [sp, #12]
 8002ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ec4:	4433      	add	r3, r6
 8002ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ec8:	e767      	b.n	8002d9a <_svfiprintf_r+0x4e>
 8002eca:	460c      	mov	r4, r1
 8002ecc:	2001      	movs	r0, #1
 8002ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ed2:	e7a5      	b.n	8002e20 <_svfiprintf_r+0xd4>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f04f 0c0a 	mov.w	ip, #10
 8002eda:	4619      	mov	r1, r3
 8002edc:	3401      	adds	r4, #1
 8002ede:	9305      	str	r3, [sp, #20]
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ee6:	3a30      	subs	r2, #48	; 0x30
 8002ee8:	2a09      	cmp	r2, #9
 8002eea:	d903      	bls.n	8002ef4 <_svfiprintf_r+0x1a8>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0c5      	beq.n	8002e7c <_svfiprintf_r+0x130>
 8002ef0:	9105      	str	r1, [sp, #20]
 8002ef2:	e7c3      	b.n	8002e7c <_svfiprintf_r+0x130>
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002efc:	e7f0      	b.n	8002ee0 <_svfiprintf_r+0x194>
 8002efe:	ab03      	add	r3, sp, #12
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	462a      	mov	r2, r5
 8002f04:	4638      	mov	r0, r7
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <_svfiprintf_r+0x1fc>)
 8002f08:	a904      	add	r1, sp, #16
 8002f0a:	f3af 8000 	nop.w
 8002f0e:	1c42      	adds	r2, r0, #1
 8002f10:	4606      	mov	r6, r0
 8002f12:	d1d6      	bne.n	8002ec2 <_svfiprintf_r+0x176>
 8002f14:	89ab      	ldrh	r3, [r5, #12]
 8002f16:	065b      	lsls	r3, r3, #25
 8002f18:	f53f af2c 	bmi.w	8002d74 <_svfiprintf_r+0x28>
 8002f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f1e:	b01d      	add	sp, #116	; 0x74
 8002f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f24:	ab03      	add	r3, sp, #12
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	462a      	mov	r2, r5
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <_svfiprintf_r+0x1fc>)
 8002f2e:	a904      	add	r1, sp, #16
 8002f30:	f000 f87c 	bl	800302c <_printf_i>
 8002f34:	e7eb      	b.n	8002f0e <_svfiprintf_r+0x1c2>
 8002f36:	bf00      	nop
 8002f38:	080035ba 	.word	0x080035ba
 8002f3c:	080035c0 	.word	0x080035c0
 8002f40:	080035c4 	.word	0x080035c4
 8002f44:	00000000 	.word	0x00000000
 8002f48:	08002c95 	.word	0x08002c95

08002f4c <_printf_common>:
 8002f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f50:	4616      	mov	r6, r2
 8002f52:	4699      	mov	r9, r3
 8002f54:	688a      	ldr	r2, [r1, #8]
 8002f56:	690b      	ldr	r3, [r1, #16]
 8002f58:	4607      	mov	r7, r0
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	bfb8      	it	lt
 8002f5e:	4613      	movlt	r3, r2
 8002f60:	6033      	str	r3, [r6, #0]
 8002f62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f66:	460c      	mov	r4, r1
 8002f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f6c:	b10a      	cbz	r2, 8002f72 <_printf_common+0x26>
 8002f6e:	3301      	adds	r3, #1
 8002f70:	6033      	str	r3, [r6, #0]
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	0699      	lsls	r1, r3, #26
 8002f76:	bf42      	ittt	mi
 8002f78:	6833      	ldrmi	r3, [r6, #0]
 8002f7a:	3302      	addmi	r3, #2
 8002f7c:	6033      	strmi	r3, [r6, #0]
 8002f7e:	6825      	ldr	r5, [r4, #0]
 8002f80:	f015 0506 	ands.w	r5, r5, #6
 8002f84:	d106      	bne.n	8002f94 <_printf_common+0x48>
 8002f86:	f104 0a19 	add.w	sl, r4, #25
 8002f8a:	68e3      	ldr	r3, [r4, #12]
 8002f8c:	6832      	ldr	r2, [r6, #0]
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	42ab      	cmp	r3, r5
 8002f92:	dc28      	bgt.n	8002fe6 <_printf_common+0x9a>
 8002f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f98:	1e13      	subs	r3, r2, #0
 8002f9a:	6822      	ldr	r2, [r4, #0]
 8002f9c:	bf18      	it	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	0692      	lsls	r2, r2, #26
 8002fa2:	d42d      	bmi.n	8003000 <_printf_common+0xb4>
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	4638      	mov	r0, r7
 8002fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fac:	47c0      	blx	r8
 8002fae:	3001      	adds	r0, #1
 8002fb0:	d020      	beq.n	8002ff4 <_printf_common+0xa8>
 8002fb2:	6823      	ldr	r3, [r4, #0]
 8002fb4:	68e5      	ldr	r5, [r4, #12]
 8002fb6:	f003 0306 	and.w	r3, r3, #6
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	bf18      	it	ne
 8002fbe:	2500      	movne	r5, #0
 8002fc0:	6832      	ldr	r2, [r6, #0]
 8002fc2:	f04f 0600 	mov.w	r6, #0
 8002fc6:	68a3      	ldr	r3, [r4, #8]
 8002fc8:	bf08      	it	eq
 8002fca:	1aad      	subeq	r5, r5, r2
 8002fcc:	6922      	ldr	r2, [r4, #16]
 8002fce:	bf08      	it	eq
 8002fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	bfc4      	itt	gt
 8002fd8:	1a9b      	subgt	r3, r3, r2
 8002fda:	18ed      	addgt	r5, r5, r3
 8002fdc:	341a      	adds	r4, #26
 8002fde:	42b5      	cmp	r5, r6
 8002fe0:	d11a      	bne.n	8003018 <_printf_common+0xcc>
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	e008      	b.n	8002ff8 <_printf_common+0xac>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	4652      	mov	r2, sl
 8002fea:	4649      	mov	r1, r9
 8002fec:	4638      	mov	r0, r7
 8002fee:	47c0      	blx	r8
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d103      	bne.n	8002ffc <_printf_common+0xb0>
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ffc:	3501      	adds	r5, #1
 8002ffe:	e7c4      	b.n	8002f8a <_printf_common+0x3e>
 8003000:	2030      	movs	r0, #48	; 0x30
 8003002:	18e1      	adds	r1, r4, r3
 8003004:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800300e:	4422      	add	r2, r4
 8003010:	3302      	adds	r3, #2
 8003012:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003016:	e7c5      	b.n	8002fa4 <_printf_common+0x58>
 8003018:	2301      	movs	r3, #1
 800301a:	4622      	mov	r2, r4
 800301c:	4649      	mov	r1, r9
 800301e:	4638      	mov	r0, r7
 8003020:	47c0      	blx	r8
 8003022:	3001      	adds	r0, #1
 8003024:	d0e6      	beq.n	8002ff4 <_printf_common+0xa8>
 8003026:	3601      	adds	r6, #1
 8003028:	e7d9      	b.n	8002fde <_printf_common+0x92>
	...

0800302c <_printf_i>:
 800302c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003030:	7e0f      	ldrb	r7, [r1, #24]
 8003032:	4691      	mov	r9, r2
 8003034:	2f78      	cmp	r7, #120	; 0x78
 8003036:	4680      	mov	r8, r0
 8003038:	460c      	mov	r4, r1
 800303a:	469a      	mov	sl, r3
 800303c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800303e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003042:	d807      	bhi.n	8003054 <_printf_i+0x28>
 8003044:	2f62      	cmp	r7, #98	; 0x62
 8003046:	d80a      	bhi.n	800305e <_printf_i+0x32>
 8003048:	2f00      	cmp	r7, #0
 800304a:	f000 80d9 	beq.w	8003200 <_printf_i+0x1d4>
 800304e:	2f58      	cmp	r7, #88	; 0x58
 8003050:	f000 80a4 	beq.w	800319c <_printf_i+0x170>
 8003054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800305c:	e03a      	b.n	80030d4 <_printf_i+0xa8>
 800305e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003062:	2b15      	cmp	r3, #21
 8003064:	d8f6      	bhi.n	8003054 <_printf_i+0x28>
 8003066:	a101      	add	r1, pc, #4	; (adr r1, 800306c <_printf_i+0x40>)
 8003068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800306c:	080030c5 	.word	0x080030c5
 8003070:	080030d9 	.word	0x080030d9
 8003074:	08003055 	.word	0x08003055
 8003078:	08003055 	.word	0x08003055
 800307c:	08003055 	.word	0x08003055
 8003080:	08003055 	.word	0x08003055
 8003084:	080030d9 	.word	0x080030d9
 8003088:	08003055 	.word	0x08003055
 800308c:	08003055 	.word	0x08003055
 8003090:	08003055 	.word	0x08003055
 8003094:	08003055 	.word	0x08003055
 8003098:	080031e7 	.word	0x080031e7
 800309c:	08003109 	.word	0x08003109
 80030a0:	080031c9 	.word	0x080031c9
 80030a4:	08003055 	.word	0x08003055
 80030a8:	08003055 	.word	0x08003055
 80030ac:	08003209 	.word	0x08003209
 80030b0:	08003055 	.word	0x08003055
 80030b4:	08003109 	.word	0x08003109
 80030b8:	08003055 	.word	0x08003055
 80030bc:	08003055 	.word	0x08003055
 80030c0:	080031d1 	.word	0x080031d1
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	1d1a      	adds	r2, r3, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	602a      	str	r2, [r5, #0]
 80030cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0a4      	b.n	8003222 <_printf_i+0x1f6>
 80030d8:	6820      	ldr	r0, [r4, #0]
 80030da:	6829      	ldr	r1, [r5, #0]
 80030dc:	0606      	lsls	r6, r0, #24
 80030de:	f101 0304 	add.w	r3, r1, #4
 80030e2:	d50a      	bpl.n	80030fa <_printf_i+0xce>
 80030e4:	680e      	ldr	r6, [r1, #0]
 80030e6:	602b      	str	r3, [r5, #0]
 80030e8:	2e00      	cmp	r6, #0
 80030ea:	da03      	bge.n	80030f4 <_printf_i+0xc8>
 80030ec:	232d      	movs	r3, #45	; 0x2d
 80030ee:	4276      	negs	r6, r6
 80030f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030f4:	230a      	movs	r3, #10
 80030f6:	485e      	ldr	r0, [pc, #376]	; (8003270 <_printf_i+0x244>)
 80030f8:	e019      	b.n	800312e <_printf_i+0x102>
 80030fa:	680e      	ldr	r6, [r1, #0]
 80030fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003100:	602b      	str	r3, [r5, #0]
 8003102:	bf18      	it	ne
 8003104:	b236      	sxthne	r6, r6
 8003106:	e7ef      	b.n	80030e8 <_printf_i+0xbc>
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	6820      	ldr	r0, [r4, #0]
 800310c:	1d19      	adds	r1, r3, #4
 800310e:	6029      	str	r1, [r5, #0]
 8003110:	0601      	lsls	r1, r0, #24
 8003112:	d501      	bpl.n	8003118 <_printf_i+0xec>
 8003114:	681e      	ldr	r6, [r3, #0]
 8003116:	e002      	b.n	800311e <_printf_i+0xf2>
 8003118:	0646      	lsls	r6, r0, #25
 800311a:	d5fb      	bpl.n	8003114 <_printf_i+0xe8>
 800311c:	881e      	ldrh	r6, [r3, #0]
 800311e:	2f6f      	cmp	r7, #111	; 0x6f
 8003120:	bf0c      	ite	eq
 8003122:	2308      	moveq	r3, #8
 8003124:	230a      	movne	r3, #10
 8003126:	4852      	ldr	r0, [pc, #328]	; (8003270 <_printf_i+0x244>)
 8003128:	2100      	movs	r1, #0
 800312a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800312e:	6865      	ldr	r5, [r4, #4]
 8003130:	2d00      	cmp	r5, #0
 8003132:	bfa8      	it	ge
 8003134:	6821      	ldrge	r1, [r4, #0]
 8003136:	60a5      	str	r5, [r4, #8]
 8003138:	bfa4      	itt	ge
 800313a:	f021 0104 	bicge.w	r1, r1, #4
 800313e:	6021      	strge	r1, [r4, #0]
 8003140:	b90e      	cbnz	r6, 8003146 <_printf_i+0x11a>
 8003142:	2d00      	cmp	r5, #0
 8003144:	d04d      	beq.n	80031e2 <_printf_i+0x1b6>
 8003146:	4615      	mov	r5, r2
 8003148:	fbb6 f1f3 	udiv	r1, r6, r3
 800314c:	fb03 6711 	mls	r7, r3, r1, r6
 8003150:	5dc7      	ldrb	r7, [r0, r7]
 8003152:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003156:	4637      	mov	r7, r6
 8003158:	42bb      	cmp	r3, r7
 800315a:	460e      	mov	r6, r1
 800315c:	d9f4      	bls.n	8003148 <_printf_i+0x11c>
 800315e:	2b08      	cmp	r3, #8
 8003160:	d10b      	bne.n	800317a <_printf_i+0x14e>
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	07de      	lsls	r6, r3, #31
 8003166:	d508      	bpl.n	800317a <_printf_i+0x14e>
 8003168:	6923      	ldr	r3, [r4, #16]
 800316a:	6861      	ldr	r1, [r4, #4]
 800316c:	4299      	cmp	r1, r3
 800316e:	bfde      	ittt	le
 8003170:	2330      	movle	r3, #48	; 0x30
 8003172:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003176:	f105 35ff 	addle.w	r5, r5, #4294967295
 800317a:	1b52      	subs	r2, r2, r5
 800317c:	6122      	str	r2, [r4, #16]
 800317e:	464b      	mov	r3, r9
 8003180:	4621      	mov	r1, r4
 8003182:	4640      	mov	r0, r8
 8003184:	f8cd a000 	str.w	sl, [sp]
 8003188:	aa03      	add	r2, sp, #12
 800318a:	f7ff fedf 	bl	8002f4c <_printf_common>
 800318e:	3001      	adds	r0, #1
 8003190:	d14c      	bne.n	800322c <_printf_i+0x200>
 8003192:	f04f 30ff 	mov.w	r0, #4294967295
 8003196:	b004      	add	sp, #16
 8003198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319c:	4834      	ldr	r0, [pc, #208]	; (8003270 <_printf_i+0x244>)
 800319e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80031a2:	6829      	ldr	r1, [r5, #0]
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80031aa:	6029      	str	r1, [r5, #0]
 80031ac:	061d      	lsls	r5, r3, #24
 80031ae:	d514      	bpl.n	80031da <_printf_i+0x1ae>
 80031b0:	07df      	lsls	r7, r3, #31
 80031b2:	bf44      	itt	mi
 80031b4:	f043 0320 	orrmi.w	r3, r3, #32
 80031b8:	6023      	strmi	r3, [r4, #0]
 80031ba:	b91e      	cbnz	r6, 80031c4 <_printf_i+0x198>
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	f023 0320 	bic.w	r3, r3, #32
 80031c2:	6023      	str	r3, [r4, #0]
 80031c4:	2310      	movs	r3, #16
 80031c6:	e7af      	b.n	8003128 <_printf_i+0xfc>
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	f043 0320 	orr.w	r3, r3, #32
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	2378      	movs	r3, #120	; 0x78
 80031d2:	4828      	ldr	r0, [pc, #160]	; (8003274 <_printf_i+0x248>)
 80031d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031d8:	e7e3      	b.n	80031a2 <_printf_i+0x176>
 80031da:	0659      	lsls	r1, r3, #25
 80031dc:	bf48      	it	mi
 80031de:	b2b6      	uxthmi	r6, r6
 80031e0:	e7e6      	b.n	80031b0 <_printf_i+0x184>
 80031e2:	4615      	mov	r5, r2
 80031e4:	e7bb      	b.n	800315e <_printf_i+0x132>
 80031e6:	682b      	ldr	r3, [r5, #0]
 80031e8:	6826      	ldr	r6, [r4, #0]
 80031ea:	1d18      	adds	r0, r3, #4
 80031ec:	6961      	ldr	r1, [r4, #20]
 80031ee:	6028      	str	r0, [r5, #0]
 80031f0:	0635      	lsls	r5, r6, #24
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	d501      	bpl.n	80031fa <_printf_i+0x1ce>
 80031f6:	6019      	str	r1, [r3, #0]
 80031f8:	e002      	b.n	8003200 <_printf_i+0x1d4>
 80031fa:	0670      	lsls	r0, r6, #25
 80031fc:	d5fb      	bpl.n	80031f6 <_printf_i+0x1ca>
 80031fe:	8019      	strh	r1, [r3, #0]
 8003200:	2300      	movs	r3, #0
 8003202:	4615      	mov	r5, r2
 8003204:	6123      	str	r3, [r4, #16]
 8003206:	e7ba      	b.n	800317e <_printf_i+0x152>
 8003208:	682b      	ldr	r3, [r5, #0]
 800320a:	2100      	movs	r1, #0
 800320c:	1d1a      	adds	r2, r3, #4
 800320e:	602a      	str	r2, [r5, #0]
 8003210:	681d      	ldr	r5, [r3, #0]
 8003212:	6862      	ldr	r2, [r4, #4]
 8003214:	4628      	mov	r0, r5
 8003216:	f000 f82f 	bl	8003278 <memchr>
 800321a:	b108      	cbz	r0, 8003220 <_printf_i+0x1f4>
 800321c:	1b40      	subs	r0, r0, r5
 800321e:	6060      	str	r0, [r4, #4]
 8003220:	6863      	ldr	r3, [r4, #4]
 8003222:	6123      	str	r3, [r4, #16]
 8003224:	2300      	movs	r3, #0
 8003226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800322a:	e7a8      	b.n	800317e <_printf_i+0x152>
 800322c:	462a      	mov	r2, r5
 800322e:	4649      	mov	r1, r9
 8003230:	4640      	mov	r0, r8
 8003232:	6923      	ldr	r3, [r4, #16]
 8003234:	47d0      	blx	sl
 8003236:	3001      	adds	r0, #1
 8003238:	d0ab      	beq.n	8003192 <_printf_i+0x166>
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	079b      	lsls	r3, r3, #30
 800323e:	d413      	bmi.n	8003268 <_printf_i+0x23c>
 8003240:	68e0      	ldr	r0, [r4, #12]
 8003242:	9b03      	ldr	r3, [sp, #12]
 8003244:	4298      	cmp	r0, r3
 8003246:	bfb8      	it	lt
 8003248:	4618      	movlt	r0, r3
 800324a:	e7a4      	b.n	8003196 <_printf_i+0x16a>
 800324c:	2301      	movs	r3, #1
 800324e:	4632      	mov	r2, r6
 8003250:	4649      	mov	r1, r9
 8003252:	4640      	mov	r0, r8
 8003254:	47d0      	blx	sl
 8003256:	3001      	adds	r0, #1
 8003258:	d09b      	beq.n	8003192 <_printf_i+0x166>
 800325a:	3501      	adds	r5, #1
 800325c:	68e3      	ldr	r3, [r4, #12]
 800325e:	9903      	ldr	r1, [sp, #12]
 8003260:	1a5b      	subs	r3, r3, r1
 8003262:	42ab      	cmp	r3, r5
 8003264:	dcf2      	bgt.n	800324c <_printf_i+0x220>
 8003266:	e7eb      	b.n	8003240 <_printf_i+0x214>
 8003268:	2500      	movs	r5, #0
 800326a:	f104 0619 	add.w	r6, r4, #25
 800326e:	e7f5      	b.n	800325c <_printf_i+0x230>
 8003270:	080035cb 	.word	0x080035cb
 8003274:	080035dc 	.word	0x080035dc

08003278 <memchr>:
 8003278:	4603      	mov	r3, r0
 800327a:	b510      	push	{r4, lr}
 800327c:	b2c9      	uxtb	r1, r1
 800327e:	4402      	add	r2, r0
 8003280:	4293      	cmp	r3, r2
 8003282:	4618      	mov	r0, r3
 8003284:	d101      	bne.n	800328a <memchr+0x12>
 8003286:	2000      	movs	r0, #0
 8003288:	e003      	b.n	8003292 <memchr+0x1a>
 800328a:	7804      	ldrb	r4, [r0, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	428c      	cmp	r4, r1
 8003290:	d1f6      	bne.n	8003280 <memchr+0x8>
 8003292:	bd10      	pop	{r4, pc}

08003294 <memcpy>:
 8003294:	440a      	add	r2, r1
 8003296:	4291      	cmp	r1, r2
 8003298:	f100 33ff 	add.w	r3, r0, #4294967295
 800329c:	d100      	bne.n	80032a0 <memcpy+0xc>
 800329e:	4770      	bx	lr
 80032a0:	b510      	push	{r4, lr}
 80032a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032a6:	4291      	cmp	r1, r2
 80032a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032ac:	d1f9      	bne.n	80032a2 <memcpy+0xe>
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <memmove>:
 80032b0:	4288      	cmp	r0, r1
 80032b2:	b510      	push	{r4, lr}
 80032b4:	eb01 0402 	add.w	r4, r1, r2
 80032b8:	d902      	bls.n	80032c0 <memmove+0x10>
 80032ba:	4284      	cmp	r4, r0
 80032bc:	4623      	mov	r3, r4
 80032be:	d807      	bhi.n	80032d0 <memmove+0x20>
 80032c0:	1e43      	subs	r3, r0, #1
 80032c2:	42a1      	cmp	r1, r4
 80032c4:	d008      	beq.n	80032d8 <memmove+0x28>
 80032c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032ce:	e7f8      	b.n	80032c2 <memmove+0x12>
 80032d0:	4601      	mov	r1, r0
 80032d2:	4402      	add	r2, r0
 80032d4:	428a      	cmp	r2, r1
 80032d6:	d100      	bne.n	80032da <memmove+0x2a>
 80032d8:	bd10      	pop	{r4, pc}
 80032da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032e2:	e7f7      	b.n	80032d4 <memmove+0x24>

080032e4 <_free_r>:
 80032e4:	b538      	push	{r3, r4, r5, lr}
 80032e6:	4605      	mov	r5, r0
 80032e8:	2900      	cmp	r1, #0
 80032ea:	d040      	beq.n	800336e <_free_r+0x8a>
 80032ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032f0:	1f0c      	subs	r4, r1, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bfb8      	it	lt
 80032f6:	18e4      	addlt	r4, r4, r3
 80032f8:	f000 f910 	bl	800351c <__malloc_lock>
 80032fc:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <_free_r+0x8c>)
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	b933      	cbnz	r3, 8003310 <_free_r+0x2c>
 8003302:	6063      	str	r3, [r4, #4]
 8003304:	6014      	str	r4, [r2, #0]
 8003306:	4628      	mov	r0, r5
 8003308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800330c:	f000 b90c 	b.w	8003528 <__malloc_unlock>
 8003310:	42a3      	cmp	r3, r4
 8003312:	d908      	bls.n	8003326 <_free_r+0x42>
 8003314:	6820      	ldr	r0, [r4, #0]
 8003316:	1821      	adds	r1, r4, r0
 8003318:	428b      	cmp	r3, r1
 800331a:	bf01      	itttt	eq
 800331c:	6819      	ldreq	r1, [r3, #0]
 800331e:	685b      	ldreq	r3, [r3, #4]
 8003320:	1809      	addeq	r1, r1, r0
 8003322:	6021      	streq	r1, [r4, #0]
 8003324:	e7ed      	b.n	8003302 <_free_r+0x1e>
 8003326:	461a      	mov	r2, r3
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	b10b      	cbz	r3, 8003330 <_free_r+0x4c>
 800332c:	42a3      	cmp	r3, r4
 800332e:	d9fa      	bls.n	8003326 <_free_r+0x42>
 8003330:	6811      	ldr	r1, [r2, #0]
 8003332:	1850      	adds	r0, r2, r1
 8003334:	42a0      	cmp	r0, r4
 8003336:	d10b      	bne.n	8003350 <_free_r+0x6c>
 8003338:	6820      	ldr	r0, [r4, #0]
 800333a:	4401      	add	r1, r0
 800333c:	1850      	adds	r0, r2, r1
 800333e:	4283      	cmp	r3, r0
 8003340:	6011      	str	r1, [r2, #0]
 8003342:	d1e0      	bne.n	8003306 <_free_r+0x22>
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4401      	add	r1, r0
 800334a:	6011      	str	r1, [r2, #0]
 800334c:	6053      	str	r3, [r2, #4]
 800334e:	e7da      	b.n	8003306 <_free_r+0x22>
 8003350:	d902      	bls.n	8003358 <_free_r+0x74>
 8003352:	230c      	movs	r3, #12
 8003354:	602b      	str	r3, [r5, #0]
 8003356:	e7d6      	b.n	8003306 <_free_r+0x22>
 8003358:	6820      	ldr	r0, [r4, #0]
 800335a:	1821      	adds	r1, r4, r0
 800335c:	428b      	cmp	r3, r1
 800335e:	bf01      	itttt	eq
 8003360:	6819      	ldreq	r1, [r3, #0]
 8003362:	685b      	ldreq	r3, [r3, #4]
 8003364:	1809      	addeq	r1, r1, r0
 8003366:	6021      	streq	r1, [r4, #0]
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	6054      	str	r4, [r2, #4]
 800336c:	e7cb      	b.n	8003306 <_free_r+0x22>
 800336e:	bd38      	pop	{r3, r4, r5, pc}
 8003370:	20000194 	.word	0x20000194

08003374 <sbrk_aligned>:
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	4e0e      	ldr	r6, [pc, #56]	; (80033b0 <sbrk_aligned+0x3c>)
 8003378:	460c      	mov	r4, r1
 800337a:	6831      	ldr	r1, [r6, #0]
 800337c:	4605      	mov	r5, r0
 800337e:	b911      	cbnz	r1, 8003386 <sbrk_aligned+0x12>
 8003380:	f000 f8bc 	bl	80034fc <_sbrk_r>
 8003384:	6030      	str	r0, [r6, #0]
 8003386:	4621      	mov	r1, r4
 8003388:	4628      	mov	r0, r5
 800338a:	f000 f8b7 	bl	80034fc <_sbrk_r>
 800338e:	1c43      	adds	r3, r0, #1
 8003390:	d00a      	beq.n	80033a8 <sbrk_aligned+0x34>
 8003392:	1cc4      	adds	r4, r0, #3
 8003394:	f024 0403 	bic.w	r4, r4, #3
 8003398:	42a0      	cmp	r0, r4
 800339a:	d007      	beq.n	80033ac <sbrk_aligned+0x38>
 800339c:	1a21      	subs	r1, r4, r0
 800339e:	4628      	mov	r0, r5
 80033a0:	f000 f8ac 	bl	80034fc <_sbrk_r>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d101      	bne.n	80033ac <sbrk_aligned+0x38>
 80033a8:	f04f 34ff 	mov.w	r4, #4294967295
 80033ac:	4620      	mov	r0, r4
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	20000198 	.word	0x20000198

080033b4 <_malloc_r>:
 80033b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b8:	1ccd      	adds	r5, r1, #3
 80033ba:	f025 0503 	bic.w	r5, r5, #3
 80033be:	3508      	adds	r5, #8
 80033c0:	2d0c      	cmp	r5, #12
 80033c2:	bf38      	it	cc
 80033c4:	250c      	movcc	r5, #12
 80033c6:	2d00      	cmp	r5, #0
 80033c8:	4607      	mov	r7, r0
 80033ca:	db01      	blt.n	80033d0 <_malloc_r+0x1c>
 80033cc:	42a9      	cmp	r1, r5
 80033ce:	d905      	bls.n	80033dc <_malloc_r+0x28>
 80033d0:	230c      	movs	r3, #12
 80033d2:	2600      	movs	r6, #0
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	4630      	mov	r0, r6
 80033d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033dc:	4e2e      	ldr	r6, [pc, #184]	; (8003498 <_malloc_r+0xe4>)
 80033de:	f000 f89d 	bl	800351c <__malloc_lock>
 80033e2:	6833      	ldr	r3, [r6, #0]
 80033e4:	461c      	mov	r4, r3
 80033e6:	bb34      	cbnz	r4, 8003436 <_malloc_r+0x82>
 80033e8:	4629      	mov	r1, r5
 80033ea:	4638      	mov	r0, r7
 80033ec:	f7ff ffc2 	bl	8003374 <sbrk_aligned>
 80033f0:	1c43      	adds	r3, r0, #1
 80033f2:	4604      	mov	r4, r0
 80033f4:	d14d      	bne.n	8003492 <_malloc_r+0xde>
 80033f6:	6834      	ldr	r4, [r6, #0]
 80033f8:	4626      	mov	r6, r4
 80033fa:	2e00      	cmp	r6, #0
 80033fc:	d140      	bne.n	8003480 <_malloc_r+0xcc>
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	4631      	mov	r1, r6
 8003402:	4638      	mov	r0, r7
 8003404:	eb04 0803 	add.w	r8, r4, r3
 8003408:	f000 f878 	bl	80034fc <_sbrk_r>
 800340c:	4580      	cmp	r8, r0
 800340e:	d13a      	bne.n	8003486 <_malloc_r+0xd2>
 8003410:	6821      	ldr	r1, [r4, #0]
 8003412:	3503      	adds	r5, #3
 8003414:	1a6d      	subs	r5, r5, r1
 8003416:	f025 0503 	bic.w	r5, r5, #3
 800341a:	3508      	adds	r5, #8
 800341c:	2d0c      	cmp	r5, #12
 800341e:	bf38      	it	cc
 8003420:	250c      	movcc	r5, #12
 8003422:	4638      	mov	r0, r7
 8003424:	4629      	mov	r1, r5
 8003426:	f7ff ffa5 	bl	8003374 <sbrk_aligned>
 800342a:	3001      	adds	r0, #1
 800342c:	d02b      	beq.n	8003486 <_malloc_r+0xd2>
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	442b      	add	r3, r5
 8003432:	6023      	str	r3, [r4, #0]
 8003434:	e00e      	b.n	8003454 <_malloc_r+0xa0>
 8003436:	6822      	ldr	r2, [r4, #0]
 8003438:	1b52      	subs	r2, r2, r5
 800343a:	d41e      	bmi.n	800347a <_malloc_r+0xc6>
 800343c:	2a0b      	cmp	r2, #11
 800343e:	d916      	bls.n	800346e <_malloc_r+0xba>
 8003440:	1961      	adds	r1, r4, r5
 8003442:	42a3      	cmp	r3, r4
 8003444:	6025      	str	r5, [r4, #0]
 8003446:	bf18      	it	ne
 8003448:	6059      	strne	r1, [r3, #4]
 800344a:	6863      	ldr	r3, [r4, #4]
 800344c:	bf08      	it	eq
 800344e:	6031      	streq	r1, [r6, #0]
 8003450:	5162      	str	r2, [r4, r5]
 8003452:	604b      	str	r3, [r1, #4]
 8003454:	4638      	mov	r0, r7
 8003456:	f104 060b 	add.w	r6, r4, #11
 800345a:	f000 f865 	bl	8003528 <__malloc_unlock>
 800345e:	f026 0607 	bic.w	r6, r6, #7
 8003462:	1d23      	adds	r3, r4, #4
 8003464:	1af2      	subs	r2, r6, r3
 8003466:	d0b6      	beq.n	80033d6 <_malloc_r+0x22>
 8003468:	1b9b      	subs	r3, r3, r6
 800346a:	50a3      	str	r3, [r4, r2]
 800346c:	e7b3      	b.n	80033d6 <_malloc_r+0x22>
 800346e:	6862      	ldr	r2, [r4, #4]
 8003470:	42a3      	cmp	r3, r4
 8003472:	bf0c      	ite	eq
 8003474:	6032      	streq	r2, [r6, #0]
 8003476:	605a      	strne	r2, [r3, #4]
 8003478:	e7ec      	b.n	8003454 <_malloc_r+0xa0>
 800347a:	4623      	mov	r3, r4
 800347c:	6864      	ldr	r4, [r4, #4]
 800347e:	e7b2      	b.n	80033e6 <_malloc_r+0x32>
 8003480:	4634      	mov	r4, r6
 8003482:	6876      	ldr	r6, [r6, #4]
 8003484:	e7b9      	b.n	80033fa <_malloc_r+0x46>
 8003486:	230c      	movs	r3, #12
 8003488:	4638      	mov	r0, r7
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	f000 f84c 	bl	8003528 <__malloc_unlock>
 8003490:	e7a1      	b.n	80033d6 <_malloc_r+0x22>
 8003492:	6025      	str	r5, [r4, #0]
 8003494:	e7de      	b.n	8003454 <_malloc_r+0xa0>
 8003496:	bf00      	nop
 8003498:	20000194 	.word	0x20000194

0800349c <_realloc_r>:
 800349c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a0:	4680      	mov	r8, r0
 80034a2:	4614      	mov	r4, r2
 80034a4:	460e      	mov	r6, r1
 80034a6:	b921      	cbnz	r1, 80034b2 <_realloc_r+0x16>
 80034a8:	4611      	mov	r1, r2
 80034aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034ae:	f7ff bf81 	b.w	80033b4 <_malloc_r>
 80034b2:	b92a      	cbnz	r2, 80034c0 <_realloc_r+0x24>
 80034b4:	f7ff ff16 	bl	80032e4 <_free_r>
 80034b8:	4625      	mov	r5, r4
 80034ba:	4628      	mov	r0, r5
 80034bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034c0:	f000 f838 	bl	8003534 <_malloc_usable_size_r>
 80034c4:	4284      	cmp	r4, r0
 80034c6:	4607      	mov	r7, r0
 80034c8:	d802      	bhi.n	80034d0 <_realloc_r+0x34>
 80034ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034ce:	d812      	bhi.n	80034f6 <_realloc_r+0x5a>
 80034d0:	4621      	mov	r1, r4
 80034d2:	4640      	mov	r0, r8
 80034d4:	f7ff ff6e 	bl	80033b4 <_malloc_r>
 80034d8:	4605      	mov	r5, r0
 80034da:	2800      	cmp	r0, #0
 80034dc:	d0ed      	beq.n	80034ba <_realloc_r+0x1e>
 80034de:	42bc      	cmp	r4, r7
 80034e0:	4622      	mov	r2, r4
 80034e2:	4631      	mov	r1, r6
 80034e4:	bf28      	it	cs
 80034e6:	463a      	movcs	r2, r7
 80034e8:	f7ff fed4 	bl	8003294 <memcpy>
 80034ec:	4631      	mov	r1, r6
 80034ee:	4640      	mov	r0, r8
 80034f0:	f7ff fef8 	bl	80032e4 <_free_r>
 80034f4:	e7e1      	b.n	80034ba <_realloc_r+0x1e>
 80034f6:	4635      	mov	r5, r6
 80034f8:	e7df      	b.n	80034ba <_realloc_r+0x1e>
	...

080034fc <_sbrk_r>:
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	2300      	movs	r3, #0
 8003500:	4d05      	ldr	r5, [pc, #20]	; (8003518 <_sbrk_r+0x1c>)
 8003502:	4604      	mov	r4, r0
 8003504:	4608      	mov	r0, r1
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	f7fd f86e 	bl	80005e8 <_sbrk>
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	d102      	bne.n	8003516 <_sbrk_r+0x1a>
 8003510:	682b      	ldr	r3, [r5, #0]
 8003512:	b103      	cbz	r3, 8003516 <_sbrk_r+0x1a>
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	bd38      	pop	{r3, r4, r5, pc}
 8003518:	2000019c 	.word	0x2000019c

0800351c <__malloc_lock>:
 800351c:	4801      	ldr	r0, [pc, #4]	; (8003524 <__malloc_lock+0x8>)
 800351e:	f000 b811 	b.w	8003544 <__retarget_lock_acquire_recursive>
 8003522:	bf00      	nop
 8003524:	200001a0 	.word	0x200001a0

08003528 <__malloc_unlock>:
 8003528:	4801      	ldr	r0, [pc, #4]	; (8003530 <__malloc_unlock+0x8>)
 800352a:	f000 b80c 	b.w	8003546 <__retarget_lock_release_recursive>
 800352e:	bf00      	nop
 8003530:	200001a0 	.word	0x200001a0

08003534 <_malloc_usable_size_r>:
 8003534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003538:	1f18      	subs	r0, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	bfbc      	itt	lt
 800353e:	580b      	ldrlt	r3, [r1, r0]
 8003540:	18c0      	addlt	r0, r0, r3
 8003542:	4770      	bx	lr

08003544 <__retarget_lock_acquire_recursive>:
 8003544:	4770      	bx	lr

08003546 <__retarget_lock_release_recursive>:
 8003546:	4770      	bx	lr

08003548 <_init>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	bf00      	nop
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr

08003554 <_fini>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	bf00      	nop
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr
